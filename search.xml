<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Feature Extraction for ASR ~ Pitch</title>
      <link href="/2020/04/26/ASR/kaldi-pitch/"/>
      <url>/2020/04/26/ASR/kaldi-pitch/</url>
      
        <content type="html"><![CDATA[<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.513ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2878.8 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-210E"></use></g><g data-mml-node="mo" transform="translate(576, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(965, 0)"><use xlink:href="#MJX-TEX-I-1D703"></use></g><g data-mml-node="mo" transform="translate(1434, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2100.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.513ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2878.8 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-210E"></use></g><g data-mml-node="mo" transform="translate(576, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(965, 0)"><use xlink:href="#MJX-TEX-I-1D703"></use></g><g data-mml-node="mo" transform="translate(1434, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2100.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FC"></use></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.594ex" xmlns="http://www.w3.org/2000/svg" width="16.652ex" height="2.236ex" role="img" focusable="false" viewBox="0 -725.5 7360.2 988.1" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(849.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msubsup" transform="translate(1905.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(529, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(3131, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msubsup" transform="translate(4131.3, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(529, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g><g data-mml-node="mo" transform="translate(5356.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msubsup" transform="translate(6357, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(529, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-33"></use></g></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.703ex" xmlns="http://www.w3.org/2000/svg" width="16.652ex" height="2.231ex" role="img" focusable="false" viewBox="0 -675.5 7360.2 986.1" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(849.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msubsup" transform="translate(1905.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, 363) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(529, -295.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(3131, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msubsup" transform="translate(4131.3, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, 363) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(529, -295.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g><g data-mml-node="mo" transform="translate(5356.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msubsup" transform="translate(6357, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, 363) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(529, -295) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-33"></use></g></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.685ex" xmlns="http://www.w3.org/2000/svg" width="18.01ex" height="2.223ex" role="img" focusable="false" viewBox="0 -680 7960.4 982.7" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D439"></use></g><g data-mml-node="mi" transform="translate(643, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D44E"></use></g></g><g data-mml-node="mo" transform="translate(1344.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2400.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D439"></use></g><g data-mml-node="mi" transform="translate(643, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D44F"></use></g></g><g data-mml-node="mo" transform="translate(3619.2, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(4619.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D439"></use></g><g data-mml-node="mi" transform="translate(643, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D450"></use></g></g><g data-mml-node="mo" transform="translate(5840.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(6841, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D439"></use></g><g data-mml-node="TeXAtom" transform="translate(643, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D707"></use></g></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.685ex" xmlns="http://www.w3.org/2000/svg" width="18.01ex" height="2.223ex" role="img" focusable="false" viewBox="0 -680 7960.4 982.7" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D439"></use></g><g data-mml-node="mi" transform="translate(643, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D44E"></use></g></g><g data-mml-node="mo" transform="translate(1344.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2400.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D439"></use></g><g data-mml-node="mi" transform="translate(643, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D44F"></use></g></g><g data-mml-node="mo" transform="translate(3619.2, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(4619.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D439"></use></g><g data-mml-node="mi" transform="translate(643, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D450"></use></g></g><g data-mml-node="mo" transform="translate(5840.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(6841, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D439"></use></g><g data-mml-node="TeXAtom" transform="translate(643, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D707"></use></g></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex" xmlns="http://www.w3.org/2000/svg" width="65.599ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 28994.9 2399" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2207"></use></g><g data-mml-node="mo" transform="translate(1055.2, 0)"><use xlink:href="#MJX-TEX-N-22C5"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1555.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D438"></use></g><g data-mml-node="mo" transform="translate(234.8, 224)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(2319.4, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g><g data-mml-node="mtd" transform="translate(3653, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(366.3, 676)"><use xlink:href="#MJX-TEX-I-1D70C"></use></g><g data-mml-node="msub" transform="translate(220, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D716"></use></g><g data-mml-node="mn" transform="translate(406, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-30"></use></g></g><rect width="1009.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mtext" transform="translate(1249.6, 0)"><use xlink:href="#MJX-TEX-N-A0"></use></g><g data-mml-node="mi" transform="translate(1499.6, 0)"><use xlink:href="#MJX-TEX-N-2207"></use></g><g data-mml-node="mo" transform="translate(2554.8, 0)"><use xlink:href="#MJX-TEX-N-22C5"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3055, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D435"></use></g><g data-mml-node="mo" transform="translate(212.8, 227)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(7744.8, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g><g data-mml-node="mtd" transform="translate(9078.3, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-30"></use></g><g data-mml-node="mtext" transform="translate(500, 0)"><use xlink:href="#MJX-TEX-N-A0"></use></g><g data-mml-node="mi" transform="translate(750, 0)"><use xlink:href="#MJX-TEX-N-2207"></use></g><g data-mml-node="mo" transform="translate(1805.2, 0)"><use xlink:href="#MJX-TEX-N-D7"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2805.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D438"></use></g><g data-mml-node="mo" transform="translate(234.8, 224)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(12925.6, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g><g data-mml-node="mtd" transform="translate(14259.1, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(222.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mfrac" transform="translate(1222.4, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mi" transform="translate(566, 0)"><use xlink:href="#MJX-TEX-I-1D435"></use></g></g><g data-mml-node="mrow" transform="translate(419, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mi" transform="translate(566, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g></g><rect width="1525" height="60" x="120" y="220"></rect></g><g data-mml-node="mtext" transform="translate(2987.4, 0)"><use xlink:href="#MJX-TEX-N-A0"></use></g><g data-mml-node="mi" transform="translate(3237.4, 0)"><use xlink:href="#MJX-TEX-N-2207"></use></g><g data-mml-node="mo" transform="translate(4292.7, 0)"><use xlink:href="#MJX-TEX-N-D7"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5292.9, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D435"></use></g><g data-mml-node="mo" transform="translate(212.8, 227)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(20588.8, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g><g data-mml-node="mtd" transform="translate(21922.3, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D707"></use></g><g data-mml-node="mn" transform="translate(603, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-30"></use></g></g><g data-mml-node="mrow" transform="translate(1006.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-S3-28"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(736, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43D"></use></g><g data-mml-node="mo" transform="translate(292, 227)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g><g data-mml-node="mo" transform="translate(1750.2, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(2750.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D716"></use></g><g data-mml-node="mn" transform="translate(406, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-30"></use></g></g><g data-mml-node="mfrac" transform="translate(3560, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mi" transform="translate(566, 0)"><use xlink:href="#MJX-TEX-I-1D438"></use></g></g><g data-mml-node="mrow" transform="translate(421.5, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mi" transform="translate(566, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g></g><rect width="1530" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5330, 0)"><use xlink:href="#MJX-TEX-S3-29"></use></g></g></g></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.654ex" xmlns="http://www.w3.org/2000/svg" width="16.136ex" height="5.07ex" role="img" focusable="false" viewBox="0 -1509.9 7132 2240.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(466, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D45F"></use></g></g><g data-mml-node="mo" transform="translate(834.9, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(1223.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="TeXAtom" transform="translate(572, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g><g data-mml-node="mo" transform="translate(2199.5, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2866.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(3922, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(794.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msup" transform="translate(1794.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mn" transform="translate(572, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g><g data-mml-node="msup" transform="translate(1117.2, -719.9)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mn" transform="translate(572, 289) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><rect width="2970" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.871ex" xmlns="http://www.w3.org/2000/svg" width="13.589ex" height="3.106ex" role="img" focusable="false" viewBox="0 -987.7 6006.4 1372.8" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(466, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D45F"></use></g></g><g data-mml-node="mo" transform="translate(834.9, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(1223.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="TeXAtom" transform="translate(572, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-34"></use></g></g></g><g data-mml-node="mo" transform="translate(2199.5, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2866.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(3922, 0)"><g data-mml-node="mrow" transform="translate(220, 398) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(572, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msup" transform="translate(1350, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mn" transform="translate(572, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-35"></use></g></g></g><g data-mml-node="msup" transform="translate(697.3, -377.4) scale(0.707)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mn" transform="translate(572, 289) scale(0.707)"><use xlink:href="#MJX-TEX-N-36"></use></g></g><rect width="1844.4" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.471ex" xmlns="http://www.w3.org/2000/svg" width="16.417ex" height="2.066ex" role="img" focusable="false" viewBox="0 -705 7256.2 913" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D453"></use></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(1242, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2297.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D453"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1378, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(4388, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(5388.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D453"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1378, 0)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex" xmlns="http://www.w3.org/2000/svg" width="25.757ex" height="5.018ex" role="img" focusable="false" viewBox="0 -1509.9 11384.6 2217.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-V-210F"></use></g><g data-mml-node="mfrac" transform="translate(907, 0)"><g data-mml-node="mi" transform="translate(400.5, 676)"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mi" transform="translate(566, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g></g><rect width="1127" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(2274, 0)"><use xlink:href="#MJX-TEX-I-1D713"></use></g><g data-mml-node="mo" transform="translate(3202.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(4258.6, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mfrac" transform="translate(5036.6, 0)"><g data-mml-node="msup" transform="translate(400.7, 676)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-V-210F"></use></g><g data-mml-node="mn" transform="translate(613.1, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mrow" transform="translate(220, -686)"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(500, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g></g><rect width="1578" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(6854.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2207"></use></g><g data-mml-node="mn" transform="translate(833, 413) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mi" transform="translate(8091.1, 0)"><use xlink:href="#MJX-TEX-I-1D713"></use></g><g data-mml-node="mo" transform="translate(8964.3, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(9964.6, 0)"><use xlink:href="#MJX-TEX-I-1D449"></use></g><g data-mml-node="mi" transform="translate(10733.6, 0)"><use xlink:href="#MJX-TEX-I-1D713"></use></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -9.229ex" xmlns="http://www.w3.org/2000/svg" width="25.397ex" height="19.589ex" role="img" focusable="false" viewBox="0 -4579.3 11225.6 8658.6" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0, 3461.3)"><g data-mml-node="mtd" transform="translate(500, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2207"></use></g><g data-mml-node="mo" transform="translate(1055.2, 0)"><use xlink:href="#MJX-TEX-N-22C5"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1555.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D438"></use></g><g data-mml-node="mo" transform="translate(234.8, 224)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(2819.4, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g><g data-mml-node="mtd" transform="translate(4153, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(366.3, 676)"><use xlink:href="#MJX-TEX-I-1D70C"></use></g><g data-mml-node="msub" transform="translate(220, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D716"></use></g><g data-mml-node="mn" transform="translate(406, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-30"></use></g></g><rect width="1009.6" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0, 1268.7)"><g data-mml-node="mtd" transform="translate(505, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2207"></use></g><g data-mml-node="mo" transform="translate(1055.2, 0)"><use xlink:href="#MJX-TEX-N-22C5"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1555.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D435"></use></g><g data-mml-node="mo" transform="translate(212.8, 227)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(2819.4, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g><g data-mml-node="mtd" transform="translate(4153, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -672.3)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2207"></use></g><g data-mml-node="mo" transform="translate(1055.2, 0)"><use xlink:href="#MJX-TEX-N-D7"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2055.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D438"></use></g><g data-mml-node="mo" transform="translate(234.8, 224)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(2819.4, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g><g data-mml-node="mtd" transform="translate(4153, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(222.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mfrac" transform="translate(1222.4, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mi" transform="translate(566, 0)"><use xlink:href="#MJX-TEX-I-1D435"></use></g></g><g data-mml-node="mrow" transform="translate(419, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mi" transform="translate(566, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g></g><rect width="1525" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0, -3129.8)"><g data-mml-node="mtd" transform="translate(5, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2207"></use></g><g data-mml-node="mo" transform="translate(1055.2, 0)"><use xlink:href="#MJX-TEX-N-D7"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2055.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D435"></use></g><g data-mml-node="mo" transform="translate(212.8, 227)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(2819.4, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g></g><g data-mml-node="mtd" transform="translate(4153, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D707"></use></g><g data-mml-node="mn" transform="translate(603, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-30"></use></g></g><g data-mml-node="mrow" transform="translate(1006.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-S3-28"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(736, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43D"></use></g><g data-mml-node="mo" transform="translate(292, 227)"><use xlink:href="#MJX-TEX-N-20D7"></use></g></g></g><g data-mml-node="mo" transform="translate(1750.2, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(2750.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D716"></use></g><g data-mml-node="mn" transform="translate(406, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-30"></use></g></g><g data-mml-node="mfrac" transform="translate(3560, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mi" transform="translate(566, 0)"><use xlink:href="#MJX-TEX-I-1D438"></use></g></g><g data-mml-node="mrow" transform="translate(421.5, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-2202"></use></g><g data-mml-node="mi" transform="translate(566, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g></g><rect width="1530" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5330, 0)"><use xlink:href="#MJX-TEX-S3-29"></use></g></g></g></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.281ex" xmlns="http://www.w3.org/2000/svg" width="21.99ex" height="7.692ex" role="img" focusable="false" viewBox="0 -1950 9719.7 3400" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-S4-23A7" transform="translate(0, 1051)"></use><use xlink:href="#MJX-TEX-S4-23A9" transform="translate(0, -551)"></use><use xlink:href="#MJX-TEX-S4-23A8" transform="translate(0, 0)"></use><svg width="889" height="81" y="1060" x="0" viewBox="0 14.3 889 81"><use xlink:href="#MJX-TEX-S4-23AA" transform="scale(1, 0.398)"></use></svg><svg width="889" height="81" y="-641" x="0" viewBox="0 14.3 889 81"><use xlink:href="#MJX-TEX-S4-23AA" transform="scale(1, 0.398)"></use></svg></g><g data-mml-node="mtable" transform="translate(889, 0)"><g data-mml-node="mtr" transform="translate(0, 1200)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-31"></use></g></g><g data-mml-node="mi" transform="translate(932.6, 0)"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1726.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(2727, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mn" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-31"></use></g></g><g data-mml-node="mi" transform="translate(3559.6, 0)"><use xlink:href="#MJX-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(4271.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(5272, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="mn" transform="translate(433, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-31"></use></g></g><g data-mml-node="mi" transform="translate(6108.5, 0)"><use xlink:href="#MJX-TEX-I-1D467"></use></g><g data-mml-node="mo" transform="translate(6851.3, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(7907.1, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D451"></use></g><g data-mml-node="mn" transform="translate(520, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0, 0)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mi" transform="translate(932.6, 0)"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1726.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(2727, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mn" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mi" transform="translate(3559.6, 0)"><use xlink:href="#MJX-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(4271.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(5272, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="mn" transform="translate(433, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mi" transform="translate(6108.5, 0)"><use xlink:href="#MJX-TEX-I-1D467"></use></g><g data-mml-node="mo" transform="translate(6851.3, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(7907.1, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D451"></use></g><g data-mml-node="mn" transform="translate(520, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0, -1200)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-33"></use></g></g><g data-mml-node="mi" transform="translate(932.6, 0)"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1726.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(2727, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mn" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-33"></use></g></g><g data-mml-node="mi" transform="translate(3559.6, 0)"><use xlink:href="#MJX-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(4271.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(5272, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="mn" transform="translate(433, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-33"></use></g></g><g data-mml-node="mi" transform="translate(6108.5, 0)"><use xlink:href="#MJX-TEX-I-1D467"></use></g><g data-mml-node="mo" transform="translate(6851.3, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(7907.1, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D451"></use></g><g data-mml-node="mn" transform="translate(520, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-33"></use></g></g></g></g></g><g data-mml-node="mo" transform="translate(9719.7, 0)"></g></g></g></g></svg></mjx-container></p><svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path><path id="MJX-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-TEX-I-1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path><path id="MJX-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-TEX-I-1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path><path id="MJX-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path><path id="MJX-TEX-N-2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path><path id="MJX-TEX-N-22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path><path id="MJX-TEX-I-1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path><path id="MJX-TEX-N-20D7" d="M377 694Q377 702 382 708T397 714Q404 714 409 709Q414 705 419 690Q429 653 460 633Q471 626 471 615Q471 606 468 603T454 594Q411 572 379 531Q377 529 374 525T369 519T364 517T357 516Q350 516 344 521T337 536Q337 555 384 595H213L42 596Q29 605 29 615Q29 622 42 635H401Q377 673 377 694Z"></path><path id="MJX-TEX-I-1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path><path id="MJX-TEX-I-1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path><path id="MJX-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-TEX-N-A0" d=""></path><path id="MJX-TEX-I-1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path><path id="MJX-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-TEX-N-2202" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path><path id="MJX-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-TEX-S3-28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path><path id="MJX-TEX-I-1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path><path id="MJX-TEX-S3-29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path><path id="MJX-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-V-210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path><path id="MJX-TEX-I-1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path><path id="MJX-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path><path id="MJX-TEX-S4-23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z"></path><path id="MJX-TEX-S4-23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z"></path><path id="MJX-TEX-S4-23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z"></path><path id="MJX-TEX-S4-23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z"></path><path id="MJX-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path><path id="MJX-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></defs></svg>]]></content>
      
      
      <categories>
          
          <category> Speech Recognition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR </tag>
            
            <tag> ASR Frontend </tag>
            
            <tag> ASR Feature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Utterance Detection in Amazon</title>
      <link href="/2020/04/22/ASR/utterance-detection-in-amazon/"/>
      <url>/2020/04/22/ASR/utterance-detection-in-amazon/</url>
      
        <content type="html"><![CDATA[<p>最近粗略的接触了些话音检测和噪声过滤的工作，有参考到Amazon的相关论文，在此分享下论文的主要方法和贡献。本次分享的两篇论文方法套路基本一样，只是分别使用于不同的场景，一篇是用在端点检测（END-OF-UTTERANCE DETECTION）上，用来判断用户是否已经结束语音指令。另一篇是应用在Device-directed Utterance Detection上，应该主要是用在echo音箱等vpa上，用来过滤一些误触发，用户正对着设备下发的指令认为是正例，而背景噪音，细碎的嬉笑打闹聊天的声音认为是负例，不应该触发， 所以叫Device-directed Utterance Detection。</p><a id="more"></a><h2 id="Device-directed-Utterance-Detection"><a href="#Device-directed-Utterance-Detection" class="headerlink" title="Device-directed Utterance Detection"></a>Device-directed Utterance Detection</h2><h3 id="方法及贡献"><a href="#方法及贡献" class="headerlink" title="方法及贡献"></a>方法及贡献</h3><p>模型可简单概括为三种特征+一个分类器，作者用两个LSTM分别对声学和识别结果分别做embedding，再加上decoder输出的一些特征，最后将三个特征结合起来作为最后分类器的输入。系统结构如下右图所示。这种做法还是比较直观的，三部分特征刚好对应语音识别系统三大部件的输出，对 1-best hypotheses的处理基本可以理解为对语言模型的embedding。最后是一个二分类器，判断本次query是否是Device-directed话音。下左图是正负例的一些样例。</p><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-2.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-1.png" alt=""></td></tr></tbody></table><h3 id="模型与参数"><a href="#模型与参数" class="headerlink" title="模型与参数"></a>模型与参数</h3><h4 id="Acoustic-Embedding"><a href="#Acoustic-Embedding" class="headerlink" title="Acoustic Embedding"></a>Acoustic Embedding</h4><p>Acoustic Embedding 用LSTM做帧级别的device-directed target的预测，输入是每一帧log filter-bank energies (LFBEs)，以25ms帧长和10ms帧移分帧，每一帧的label都和整条query的label一样，最后使用cross-entropy Loss，SGD训练。做softmax之前的两维向量拿出来，作为Acoustic Embedding。</p><h4 id="ASR-feature"><a href="#ASR-feature" class="headerlink" title="ASR feature"></a>ASR feature</h4><p>ASR的输出特征论文里讲的有18维，但未全部给出，只介绍里其中的三维，其一是帧前向概率的平均值，先计算每一帧的前向概率的熵，所有帧的均值即为所得，熵越大说明前向的概率分布差不多，1-best的confidence就越低。 其二是1-best的viterbi cost。 其三是计算lattice节点出边的平均值。</p><h4 id="Character-Embedding"><a href="#Character-Embedding" class="headerlink" title="Character Embedding"></a>Character Embedding</h4><p>Character Embedding和Acoustic Embedding的思路基本一样，也是使用LSTM。只不过输入是1-best输出character级别的embedding，每个character的embedding <a href="https://github.com/stanfordnlp/GloVe" target="_blank" rel="noopener">GloVE</a>来训练。也是取最后一个character的输出作为这部分的Embedding（2维）。</p><h4 id="Classification-Layer"><a href="#Classification-Layer" class="headerlink" title="Classification Layer"></a>Classification Layer</h4><p>最后一个分类层使用的就是简单的两层前馈神经网络，在另一篇论文里有讲，隐藏层节点为100。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>论文的实验数据是在他们自己产品的数据集，并未公开，下面是一些实验结果。</p><ul><li><p>参数选择<br>作者对LSTM的层数和节点数以及character embedding的维数做了对比实验，实验结果如下图。</p><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-3.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-4.png" alt=""></td></tr></tbody></table></li><li><p>性能比较<br>作者还对比了三种单独特征及融合特征对分类的影响，实验显示单单ASR decoder 特征效果最好，多特征的话效果更加。模型用Detection error tradeoff (DET)评价，跟ROC曲线差不多的意思，只是横纵轴定义不一样。</p><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-5.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-6.png" alt=""></td></tr></tbody></table></li></ul><p>我们参考了此篇论文的思路，目前只使用了ASR Decoder的特征，不过由于decoder实现不一样，采用的特征和维度都不一样，效果也还行，这是可以解释的，ASR Decoder输出的特征是声学模型和语言模型这两个大模型生成的，区分度应该不错。</p><h2 id="End-of-Utterance-detection"><a href="#End-of-Utterance-detection" class="headerlink" title="End-of-Utterance detection"></a>End-of-Utterance detection</h2><p>End-of-Utterance检测也叫enpoint检测，主要是判断用户是否说完话了，对端到端的速度和用户体验至关重要，既不能提前（会打断用户说话），也不能延后（端到端速度慢，体验差）。简单说endpoint检测的目标就是保持准确率高的前提下尽可能快的检测到用户说完话的意图，这当然需要trade-off，一个灵敏的检测器有可能会截断用户的query导致准确率下降。 <a href="https://github.com/kaldi-asr/kaldi" target="_blank" rel="noopener">Kaldi</a>里面的通常做法是计算解码时lattice里面的末尾silence帧的数量，达到一定长度并且满足对应的cost阈值就认为是endpoint，这种方法纯从解码器的角度出发，利用声学模型的输出，没有对声学特征做另外的建模。工业实践上为了效果和计算资源，一般还会在语音识别前面加一个voice-activity-detection (VAD)检测，本文也是这个思路。 这篇论文发表的时间要早于上面那篇，而且要解决的问题也比上篇要复杂。</p><h3 id="方法及贡献-1"><a href="#方法及贡献-1" class="headerlink" title="方法及贡献"></a>方法及贡献</h3><p>本文模型结构基本和上文是一样的（上文借鉴本文）， 特征也是三个部分组成Acoustic Eembedding和 1-best hypotheses Eembedding和ASR输出的feature，最后加个二分类器，不过上文主要论证比较ASR feature的有效性，此本则偏重与Acoustic部分。另外，这篇论文是在远场环境上做的，一般来说远场环境的困难要大得多。</p><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-2.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-1.png" alt=""></td></tr></tbody></table><p>不同的地方主要有以下几点：</p><ul><li>Acoustic 部分做的是多任务学习，将声学feature同时用于训练VAD和endpoint检测，而且与上文不同，label是帧级别的，所以训练时需要对齐特征和label，如上右图所示。取VAD部分取输出给Inference时计算阈值，endpoint部分则取pre-softmax的特征作为最后二分类器的输入。</li><li>1-best hypotheses embedding部分使用的是word embedding，由于输出和帧无法一一对应，如果ASR输出的partial没有变化，则会一直延用最新的word embedding。</li><li>ASR feature 方面只介绍了个pause duration，这个应该跟kaidi检测endpoint类似，计算lattice（或其他类似解码网格）的末尾静音帧数。</li></ul><h3 id="Inference-Pipeline"><a href="#Inference-Pipeline" class="headerlink" title="Inference Pipeline"></a>Inference Pipeline</h3><p>上面介绍Acoustic部分分为两部分vad + endpoint，在inference是先用vad的输出判断静音的持续时间，通过阈值Tmin，Tmax来判断是否启用endpoint检测（二分类器的输出）。在下面两种情况下认为检测到endpoint，当vad给出的静音阈值大于Tmin并且最终二分类器输出为endpoint，或者vad给出的静音阈值超过Tmax。 endpoint检测是一个比较困难的题目，实际工业应用基本不可能单模型就解决得很好，一般都使用多模型融合。</p><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><ul><li><p>特征性能比较<br>实验部分照例比较了三种特征的性能和融合后的性能，Acoustic 单特征最后，融合能带来性能的提升。</p><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-3.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-4.png" alt=""></td></tr></tbody></table></li><li><p>混合语言的效果<br>作者还进行了混合语言的效果，说明本模型跟语言并不太相关，即模型架构不需要改变，换批训练数据，在其他语言上也能达到相同的效果。这当然是最理想的结果，相关实验结果如下。</p></li></ul><table><thead><tr><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-5.png" alt=""></td></tr></tbody></table><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>[1] <a href="https://docs.qq.com/pdf/DRUtsWlVCZ2lFZERU" target="_blank" rel="noopener">Device-directed Utterance Detection</a></li><li>[2] <a href="https://docs.qq.com/pdf/DRXFyTFdHT05YcXBw" target="_blank" rel="noopener">COMBINING ACOUSTIC EMBEDDINGSAND DECODING FEATURES FOR END-OF-UTTERANCE DETECTION IN REAL-TIME FAR-FIELD SPEECH RECOGNITION SYSTEMS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Speech Recognition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR </tag>
            
            <tag> 论文 </tag>
            
            <tag> amazon </tag>
            
            <tag> Utterance Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习人类语言处理 公开课</title>
      <link href="/2020/03/28/ASR/lihongyi_nlp/"/>
      <url>/2020/03/28/ASR/lihongyi_nlp/</url>
      
        <content type="html"><![CDATA[<p>李宏毅《深度学习人类语言处理》公开课<br>课程地址：<a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_DLHLP20.html" target="_blank" rel="noopener">http://speech.ee.ntu.edu.tw/~tlkagk/courses_DLHLP20.html</a>  </p><a id="more"></a><h3 id="P1-Course-Overview"><a href="#P1-Course-Overview" class="headerlink" title="P1 : Course Overview"></a>P1 : Course Overview</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=161006931&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P2-Speech-Recognition-Part-1"><a href="#P2-Speech-Recognition-Part-1" class="headerlink" title="P2 : Speech Recognition (Part 1)"></a>P2 : Speech Recognition (Part 1)</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=161006956&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P3-Listen-Attend-Spell-part-2"><a href="#P3-Listen-Attend-Spell-part-2" class="headerlink" title="P3 : Listen, Attend, Spell (part 2)"></a>P3 : Listen, Attend, Spell (part 2)</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=163087865&page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P4-CTC-RNN-T-and-more-part-3"><a href="#P4-CTC-RNN-T-and-more-part-3" class="headerlink" title="P4 : CTC, RNN-T and more (part 3)"></a>P4 : CTC, RNN-T and more (part 3)</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=163087693&page=4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P5-HMM"><a href="#P5-HMM" class="headerlink" title="P5 : HMM"></a>P5 : HMM</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=166218711&page=5" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P6-Alignment-of-HMM-CTC-and-RNN-T"><a href="#P6-Alignment-of-HMM-CTC-and-RNN-T" class="headerlink" title="P6 : Alignment of HMM, CTC and RNN-T"></a>P6 : Alignment of HMM, CTC and RNN-T</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=166222248&page=6" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P7-RNN-T-Training"><a href="#P7-RNN-T-Training" class="headerlink" title="P7 : RNN-T Training"></a>P7 : RNN-T Training</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=167357962&page=7" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P8-Language-Modeling"><a href="#P8-Language-Modeling" class="headerlink" title="P8 : Language Modeling"></a>P8 : Language Modeling</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=169402582&page=8" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P9-Voice-Conversion"><a href="#P9-Voice-Conversion" class="headerlink" title="P9 : Voice Conversion"></a>P9 : Voice Conversion</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=169681445&page=9" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> Speech Recognition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR </tag>
            
            <tag> 公开课 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Towords End-to-End Speech Recognition</title>
      <link href="/2020/02/26/ASR/towords_e2e_asr/"/>
      <url>/2020/02/26/ASR/towords_e2e_asr/</url>
      
        <content type="html"><![CDATA[<p>Google’s End-to-End Speech Recognition Tutorial at ISCSLP 2018 </p><a id="more"></a><p><embed style="width: 100%; height: 800px" src="https://docs.qq.com/pdf/DRWdnd1VvQnlmQ0RE" frameborder=0 allowfullscreen></embed></p>]]></content>
      
      
      <categories>
          
          <category> Speech Recognition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR </tag>
            
            <tag> 论文 </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++仿函数</title>
      <link href="/2019/08/17/cpp/C-functor/"/>
      <url>/2019/08/17/cpp/C-functor/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>functor的英文解释为something that performs a function，即其行为类似函数的东西。C++中的仿函数是通过在类中重载()运算符实现，使你可以像使用函数一样来创建类的对象。  </p><a id="more"></a><h4 id="C中是怎么实现这个功能的"><a href="#C中是怎么实现这个功能的" class="headerlink" title="C中是怎么实现这个功能的"></a>C中是怎么实现这个功能的</h4><p>使用指针函数和回调函数，比如qsort的比较函数</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">sort_function</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> list<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sort_function<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//起始地址，个数，元素大小，回调函数 </span>   <span class="token keyword">int</span>  x<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i\n"</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-中的仿函数"><a href="#C-中的仿函数" class="headerlink" title="C++ 中的仿函数"></a>C++ 中的仿函数</h4><ul><li>一个例子(增加任意常数)<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// this is a functor</span><span class="token keyword">struct</span> add_x <span class="token punctuation">{</span><span class="token function">add_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// usage:</span>add_x <span class="token function">add42</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// create an instance of the functor class</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">add42</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// and "call" it</span><span class="token function">assert</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// and it added 42 to its argument</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Pass a functor to std::transform, which calls the functor on every element </span><span class="token comment" spellcheck="true">// in the input sequence, and stores the result to the output sequence</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">transform</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add_x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">assert</span><span class="token punctuation">(</span>out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>迭代和计算逻辑分开（for_each 求和例子）<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sum <span class="token punctuation">{</span>  <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">total</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token operator">*</span> total<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token operator">*</span>total <span class="token operator">+</span><span class="token operator">=</span> element<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  sum <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints total = 15;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>for_each 为STL的非变易算法，是一组不破坏操作数据的模板函数，对[first,last)数据逐个处理，执行由单参数函数对象所定义的操作。</p></blockquote></li><li>仿函数可以是有状态的，可以应用到多个集合中。<br>一个例子（对多个数据集取平均）<pre class="line-numbers language-c"><code class="language-c">class CalculateAverage <span class="token punctuation">{</span>public<span class="token punctuation">:</span>  <span class="token function">CalculateAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">acc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> acc <span class="token operator">+</span><span class="token operator">=</span> x<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">float</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> acc <span class="token operator">/</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span>  <span class="token keyword">float</span> acc<span class="token punctuation">;</span>  <span class="token keyword">int</span>   n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CalculateAverage avg<span class="token punctuation">;</span>avg <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">for_each</span><span class="token punctuation">(</span>dataA<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataA<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>avg <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">for_each</span><span class="token punctuation">(</span>dataB<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataB<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>avg <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">for_each</span><span class="token punctuation">(</span>dataC<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataC<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> avg<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>仿函数的性能<br>使用仿函数编译器可以准确知道需要调用哪个函数。这意味着它可以内联这个函数调用。而如果使用函数指针，编译器不能直接确定指针指向的函数，而这必须在程序运行时才能得到并调用。一个例子就是比较std::sort 和qsort ，STL的版本一般要快5-10倍。</li><li>STL 内建仿函数<pre class="line-numbers language-c"><code class="language-c">plus<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token comment" spellcheck="true">// plus example</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>     </span><span class="token comment" spellcheck="true">// std::cout</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>   </span><span class="token comment" spellcheck="true">// std::plus</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>    </span><span class="token comment" spellcheck="true">// std::transform</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> first<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> second<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> results<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">transform</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> first<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> second<span class="token punctuation">,</span> results<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>plus<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出</span><span class="token comment" spellcheck="true">// 11 22 33 44 55</span>minus<span class="token operator">&lt;</span>T<span class="token operator">></span>multiplies<span class="token operator">&lt;</span>T<span class="token operator">></span>divides<span class="token operator">&lt;</span>T<span class="token operator">></span>modulus<span class="token operator">&lt;</span>T<span class="token operator">></span>negate<span class="token operator">&lt;</span>T<span class="token operator">></span>equal_to<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token comment" spellcheck="true">// equal_to example</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>     </span><span class="token comment" spellcheck="true">// std::cout</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utility></span>      </span><span class="token comment" spellcheck="true">// std::pair</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>   </span><span class="token comment" spellcheck="true">// std::equal_to</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>    </span><span class="token comment" spellcheck="true">// std::mismatch</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">></span> ptiter<span class="token punctuation">;</span><span class="token keyword">int</span> foo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> bar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ptiter <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">mismatch</span> <span class="token punctuation">(</span>foo<span class="token punctuation">,</span> foo<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> bar<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>equal_to<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"First mismatching pair is: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptiter<span class="token punctuation">.</span>first<span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" and "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptiter<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出</span><span class="token comment" spellcheck="true">// First mismatching pair is: 30 and 40</span>not_equal_to<span class="token operator">&lt;</span>T<span class="token operator">></span>greater<span class="token operator">&lt;</span>T<span class="token operator">></span>greater_equal<span class="token operator">&lt;</span>T<span class="token operator">></span>less<span class="token operator">&lt;</span>T<span class="token operator">></span>less_equal<span class="token operator">&lt;</span>T<span class="token operator">></span>logical_and<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token comment" spellcheck="true">// logical_and example</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>     </span><span class="token comment" spellcheck="true">// std::cout, std::boolalpha</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>   </span><span class="token comment" spellcheck="true">// std::logical_and</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>    </span><span class="token comment" spellcheck="true">// std::transform</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>bool foo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>true<span class="token punctuation">,</span>false<span class="token punctuation">,</span>true<span class="token punctuation">,</span>false<span class="token punctuation">}</span><span class="token punctuation">;</span>bool bar<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>true<span class="token punctuation">,</span>true<span class="token punctuation">,</span>false<span class="token punctuation">,</span>false<span class="token punctuation">}</span><span class="token punctuation">;</span>bool result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">transform</span> <span class="token punctuation">(</span>foo<span class="token punctuation">,</span> foo<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> bar<span class="token punctuation">,</span> result<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>logical_and<span class="token operator">&lt;</span>bool<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token string">"Logical AND:\n"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> foo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" AND "</span> <span class="token operator">&lt;&lt;</span> bar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出</span><span class="token comment" spellcheck="true">// Logical AND:</span><span class="token comment" spellcheck="true">// true AND true = true</span><span class="token comment" spellcheck="true">// false AND true = false</span><span class="token comment" spellcheck="true">// true AND false = false</span><span class="token comment" spellcheck="true">// false AND false = false</span>logical_or<span class="token operator">&lt;</span>T<span class="token operator">></span>logical_no<span class="token operator">&lt;</span>T<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++使用LD_PRELOAD劫持（Hook）库函数</title>
      <link href="/2019/06/13/cpp/C-hook/"/>
      <url>/2019/06/13/cpp/C-hook/</url>
      
        <content type="html"><![CDATA[<p>在调试C++程序的时候，我们并不是每次都能拿到源代码，很多时候我们只能得到一个动态库so，调试时这个动态库就是一个黑匣子，没办法查看修改或者在里面加日志，那么我们是不是就没有任何办法对我们感兴趣的函数和参数进行监控和跟踪了呢？  </p><a id="more"></a><p>对于这种情况，我们一般会挂上<code>gdb</code>,然后在我们感兴趣的地方打上断点，然后查看堆栈里的变量的值。但这个过程时比较繁琐的，尤其是在需要了解程序执行的大量中间过程时是非常让人抓狂的。下面我们将介绍一种使用钩子函数的方法，来修改目标函数的运行时的行为，来达到我们跟踪函数运行的目的。  </p><p>钩子函数可以在运行时劫持预先存在的函数，我们可以在钩子函数里对预先的函数做一些包装，使得函数保持原来的功能的前提下做一些额外的操作。在本文中我们主要的是linux系统的动态加载API，动态加载允许在运行时加载并运行动态链接库里的函数，所以我们可以把钩子函数打包成动态链接库，以实现对现有函数的劫持。实现这个功能需要用到LD_PRELOAD环境变量，使用LD_PRELOAD加载的动态库会最先被加载，这就使得我们有机会可以在钩子函数里运用动态加载技术将原先的函数绑定到钩子函数中，从而达到监控及跟踪的效果。</p><p>下面就以最简单的hello world的例子来讲解这一切是怎么做到的。<br>首先main函数，helloworld.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello world!n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再是钩子函数，example.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h></span></span><span class="token keyword">int</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>new_puts<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span>  new_puts <span class="token operator">=</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>RTLD_NEXT<span class="token punctuation">,</span> <span class="token string">"puts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"Hello world!n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token function">new_puts</span><span class="token punctuation">(</span><span class="token string">"Goodbye, cruel world!n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token function">new_puts</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个样例里，我们劫持了标准库里的<code>puts</code>函数。简单看一下代码。<br>第四行我们定义了一个和标准库里有一模一样签名的<code>puts</code>函数，这是能劫持<code>puts</code>函数的关键，钩子函数的签名一定要和原函数一模一样。<br>第五行我们又声明了一个和原函数参数一样的函数指针，这个指针用来后面指向原函数。<br>第九行利用<code>dlsym</code>函数获取原函数的指针并赋给上面声明的指针，<code>RTLD_NEXT</code>这个枚举变量告诉动态加载器加载第二个参数（在本例中为<code>puts</code>）相关联的函数的下一个实例也就是原函数里的<code>puts</code>。<br>后面的<code>if</code>判断里我们比较传进来的参数，然后输出不同的结果，从而在运行时改变程序的行为。</p><p>编译运行看一下</p><pre class="line-numbers language-bash"><code class="language-bash">kingway@ubuntu:~/code$ gcc helloworld.c -o helloworldkingway@ubuntu:~/code$ gcc example.c -o libexample.so -fPIC -shared -ldl -D_GNU_SOURCE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>helloworld.c正常编译成可执行文件就行，example.c我们需要编译成位置无关的动态链接库，<code>-ldl -D_GNU_SOURCE</code>是必须的，这样我们才能使用动态加载API，并且访问<code>RTLD_NEXT</code>枚举变量。</p><p>看一下运行的结果</p><pre class="line-numbers language-bash"><code class="language-bash">kingway@ubuntu:~/code$ <span class="token function">export</span> LD_PRELOAD<span class="token operator">=</span><span class="token string">"/home/kingway/code/libexample.so"</span>kingway@ubuntu:~/code$ ./helloworldGoodbye, cruel world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到Hello world成功被劫持，并输出了钩子函数里的结果。这只是一个简单的例子，但通过这种方法，我们可以轻松的劫持黑匣子动态链接库的函数，并在必要时进行一些修改，达到调试的目的。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11智能指针</title>
      <link href="/2019/06/03/cpp/CPP-smart-pointer/"/>
      <url>/2019/06/03/cpp/CPP-smart-pointer/</url>
      
        <content type="html"><![CDATA[<p>很多人怕写C/C++ 程序就是因为指针，因为指针给了程序员高度的自由，同样也赋予了高度的责任，稍有不慎就导致内存泄漏。其实写C++ 可以完全不用指针，尤其C++ 11对智能指针作了进一步的升级，在不需要使用任何裸指针的前提下也可以写出高效的C++ 程序。C++ 11中定义了<code>unique_ptr</code>、<code>shared_ptr</code>与<code>weak_ptr</code>三种智能指针(smart pointer)，都包含在<code>&lt;memory&gt;</code>头文件中。智能指针可以对动态分配的资源进行管理，保证任何情况下，已构造的对象最终会销毁，即它的析构函数最终会被调用。</p><a id="more"></a><h4 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h4><p>如名字所示，<code>unique_ptr</code>是个独占指针，C++ 11之前就已经存在，<code>unique_ptr</code>所指的内存为自己独有，某个时刻只能有一个<code>unique_ptr</code>指向一个给定的对象，不支持拷贝和赋值。下面以代码样例来说明<code>unique_ptr</code>的用法，各种情况都在代码注释给出。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up1</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 无法复制的unique_ptr</span>    <span class="token comment" spellcheck="true">// unique_ptr&lt;int> up2 = up1;        // err, 不能通过编译</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up1 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 11</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> up3 <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>up1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 现在p3是数据的唯一的unique_ptr</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up3 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 11</span>    <span class="token comment" spellcheck="true">// std::cout &lt;&lt; *up1 &lt;&lt; std::endl;   // err, 运行时错误，空指针</span>    up3<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 显式释放内存</span>    up1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 不会导致运行时错误</span>    <span class="token comment" spellcheck="true">// std::cout &lt;&lt; *up3 &lt;&lt; std::endl;   // err, 运行时错误，空指针</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up4</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 无法复制的unique_ptr</span>    up4<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "绑定"动态对象</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up4 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 44</span>    up4 <span class="token operator">=</span> nullptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显式销毁所指对象，同时智能指针变为空指针。与up4.reset()等价</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up5</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> up5<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只是释放控制权，不会释放内存</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// cout &lt;&lt; *up5 &lt;&lt; endl; // err, 运行时错误，不再拥有内存</span>    delete p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放堆区资源</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><p><code>shared_ptr</code>允许多个该智能指针共享“拥有”同一堆分配对象的内存，这通过引用计数（reference counting）实现，会记录有多少个shared_ptr共同指向一个对象，一旦最后一个这样的指针被销毁，也就是一旦某个对象的引用计数变为0，这个对象会被自动删除。支持复制和赋值操作。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp1</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sp2 <span class="token operator">=</span> sp1<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cout: "</span> <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印引用计数, 2</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    sp1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示让引用计数减一</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"count: "</span> <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印引用计数, 1</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 22</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了上面出现的<code>use_count</code>和<code>reset</code>之外，还有<code>unique</code>返回是否是独占所有权(use_count 为 1)，<code>swap</code>交换两个shared_ptr对象(即交换所拥有的对象)，<code>get</code>返回内部对象(指针)几个成员函数。</p><ul><li>make_shared 函数<br>最安全的分配和使用动态内存的方法是调用一个名为<code>make_shared</code>的标准库函数。此函数在动态内存中分配一个对象并初始化它，返回指向此对象的<code>shared_ptr</code>。当要用<code>make_shared</code>时，必须指定想要创建的对象的类型或者使用更为简洁的<code>auto</code>，如下：<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 指向一个值为42的int的shared_ptr</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p3 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p4指向一个值为"9999999999"的string</span>shared_ptr<span class="token operator">&lt;</span>string<span class="token operator">></span> p4 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p5指向一个值初始化的int,值为0</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p5 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p6指向一个动态分配的空vector&lt;string></span><span class="token keyword">auto</span> p6 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>当进行拷贝或赋值操作时，每个<code>shared_ptr</code>都会记录有多少个其他<code>shared_ptr</code>指向相同的对象：<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">auto</span> p <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//p指向的对象只有p一个引用者</span><span class="token keyword">auto</span> <span class="token function">q</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//p和q指向相同对象，此对象有两个引用者    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h4><p><code>weak_ptr</code>是为配合<code>shared_ptr</code>而引入的一种智能指针来协助<code>shared_ptr</code>工作，它可以从一个shared_ptr或另一个weak_ptr对象构造，它的构造和析构不会引起引用计数的增加或减少。没有重载 <code>*</code>和 <code>-&gt;</code> 但可以使用lock获得一个可用的<code>shared_ptr</code>对象</p><p><code>weak_ptr</code>的使用更为复杂一点，它可以指向<code>shared_ptr</code>指针指向的对象内存，却并不拥有该内存，而使用<code>weak_ptr</code>成员<code>lock</code>，则可返回其指向内存的一个<code>share_ptr</code>对象，且在所指对象内存已经无效时，返回指针空值nullptr。</p><p><strong>注意：weak_ptr并不拥有资源的所有权，所以不能直接使用资源。</strong> 可以从一个<code>weak_ptr</code>构造一个<code>shared_ptr</code>以取得共享资源的所有权。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>weak_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>wp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sp <span class="token operator">=</span> wp<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 转换为shared_ptr&lt;int></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sp <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"still: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"still: "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"pointer is invalid"</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp1</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sp2 <span class="token operator">=</span> sp1<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>weak_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> wp <span class="token operator">=</span> sp1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 指向shared_ptr&lt;int>所指对象</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"count: "</span> <span class="token operator">&lt;&lt;</span> wp<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// count: 2</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    <span class="token function">check</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// still: 22</span>    sp1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"count: "</span> <span class="token operator">&lt;&lt;</span> wp<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// count: 1</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    <span class="token function">check</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// still: 22</span>    sp2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"count: "</span> <span class="token operator">&lt;&lt;</span> wp<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// count: 0</span>    <span class="token function">check</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// still: pointer is invalid</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>为什么要使用weak_ptr  </p></li><li><p><em>weak_ptr解决shared_ptr循环引用的问题*</em><br>定义两个类，每个类中又包含一个指向对方类型的智能指针作为成员变量，然后创建对象，设置完成后查看引用计数后退出，看一下测试结果：</p><pre class="line-numbers language-c"><code class="language-c">class CB<span class="token punctuation">;</span>class CA<span class="token punctuation">{</span>public<span class="token punctuation">:</span>   <span class="token function">CA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CA() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token operator">~</span><span class="token function">CA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~CA() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">set_ptr</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span><span class="token operator">&amp;</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> m_ptr_b <span class="token operator">=</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">b_use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b use count : "</span> <span class="token operator">&lt;&lt;</span> m_ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is class CA!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span>   shared_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span> m_ptr_b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>class CB<span class="token punctuation">{</span>public<span class="token punctuation">:</span>   <span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CB() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token operator">~</span><span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~CB() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">set_ptr</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span><span class="token operator">&amp;</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> m_ptr_a <span class="token operator">=</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">a_use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a use count : "</span> <span class="token operator">&lt;&lt;</span> m_ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is class CB!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span>   shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> m_ptr_a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test_refer_to_each_other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> <span class="token function">ptr_a</span><span class="token punctuation">(</span>new <span class="token function">CA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   shared_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span> <span class="token function">ptr_b</span><span class="token punctuation">(</span>new <span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   ptr_a<span class="token operator">-></span><span class="token function">set_ptr</span><span class="token punctuation">(</span>ptr_b<span class="token punctuation">)</span><span class="token punctuation">;</span>   ptr_b<span class="token operator">-></span><span class="token function">set_ptr</span><span class="token punctuation">(</span>ptr_a<span class="token punctuation">)</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试结果</span><span class="token comment" spellcheck="true">// CA() called!</span><span class="token comment" spellcheck="true">// CB() called!</span><span class="token comment" spellcheck="true">// a use count : 1</span><span class="token comment" spellcheck="true">// b use count : 1</span><span class="token comment" spellcheck="true">// a use count : 2</span><span class="token comment" spellcheck="true">// b use count : 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>通过结果可以看到，最后CA和CB的对象并没有被析构，其中的引用效果如下图所示，起初定义完ptr_a和ptr_b时，只有①③两条引用，然后调用函数set_ptr后又增加了②④两条引用，当test_refer_to_each_other这个函数返回时，对象ptr_a和ptr_b被销毁，也就是①③两条引用会被断开，但是②④两条引用依然存在，每一个的引用计数都不为0，结果就导致其指向的内部对象无法析构，造成内存泄漏。<br><img src="http://img.kingway.fun/IMGMatrix/blog/cpp/c11001.png" alt=""></p><p>解决这种状况的办法就是将两个类中的一个成员变量改为weak_ptr对象，因为weak_ptr不会增加引用计数，使得引用形不成环，最后就可以正常的释放内部的对象，不会造成内存泄漏，比如将CB中的成员变量改为weak_ptr对象，代码如下：</p><pre class="line-numbers language-c"><code class="language-c">class CB<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CB() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~CB() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">set_ptr</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span><span class="token operator">&amp;</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> m_ptr_a <span class="token operator">=</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">a_use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a use count : "</span> <span class="token operator">&lt;&lt;</span> m_ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is class CB!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    weak_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> m_ptr_a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试结果</span><span class="token comment" spellcheck="true">// CA() called!</span><span class="token comment" spellcheck="true">// CB() called!</span><span class="token comment" spellcheck="true">// a use count : 1</span><span class="token comment" spellcheck="true">// b use count : 1</span><span class="token comment" spellcheck="true">// a use count : 1</span><span class="token comment" spellcheck="true">// b use count : 2</span><span class="token comment" spellcheck="true">// ~CA() called!</span><span class="token comment" spellcheck="true">// ~CB() called!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这次结果可以看到，CA和CB的对象都被正常的析构了，引用关系如下图所示，流程与上一例子相似，但是不同的是④这条引用是通过weak_ptr建立的，并不会增加引用计数，也就是说CA的对象只有一个引用计数，而CB的对象只有2个引用计数，当test_refer_to_each_other这个函数返回时，对象ptr_a和ptr_b被销毁，也就是①③两条引用会被断开，此时CA对象的引用计数会减为0，对象被销毁，其内部的m_ptr_b成员变量也会被析构，导致CB对象的引用计数会减为0，对象被销毁，进而解决了引用成环的问题。</p><p><img src="http://img.kingway.fun/IMGMatrix/blog/cpp/c11002.png" alt=""></p><ul><li><p><strong>weak_ptr 注意事项</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 编译错误 </span><span class="token comment" spellcheck="true">// error C2665: “std::weak_ptr&lt;CA>::weak_ptr”: 3 个重载中没有一个可以转换所有参数类型</span><span class="token comment" spellcheck="true">// weak_ptr&lt;CA> ptr_1(new CA());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 编译错误</span><span class="token comment" spellcheck="true">// error C2440 : “初始化”: 无法从“std::weak_ptr&lt;CA>”转换为“std::shared_ptr&lt;CA>”</span><span class="token comment" spellcheck="true">// shared_ptr&lt;CA> ptr_3 = wk_ptr;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 编译错误</span><span class="token comment" spellcheck="true">// 编译必须作用于相同的指针类型之间</span><span class="token comment" spellcheck="true">// wk_ptr_a.swap(wk_ptr_b);         // 调用交换函数</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 编译错误</span><span class="token comment" spellcheck="true">// 编译必须作用于相同的指针类型之间</span><span class="token comment" spellcheck="true">// wk_ptr_b = wk_ptr_a;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>weak_ptr中只有函数lock和expired两个函数比较重要，因为它本身不会增加引用计数，所以它指向的对象可能在它用的时候已经被释放了，所以在用之前需要使用expired函数来检测是否过期，然后使用lock函数来获取其对应的shared_ptr对象，然后进行后续操作：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> <span class="token function">ptr_a</span><span class="token punctuation">(</span>new <span class="token function">CA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出：CA() called!</span>  shared_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span> <span class="token function">ptr_b</span><span class="token punctuation">(</span>new <span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出：CB() called!</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ptr_a use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ptr_a use count : 1</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ptr_b use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ptr_b use count : 1</span>  weak_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> wk_ptr_a <span class="token operator">=</span> ptr_a<span class="token punctuation">;</span>  weak_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span> wk_ptr_b <span class="token operator">=</span> ptr_b<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wk_ptr_a<span class="token punctuation">.</span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      wk_ptr_a<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出：this is class CA!</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wk_ptr_b<span class="token punctuation">.</span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      wk_ptr_b<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出：this is class CB!</span>  <span class="token punctuation">}</span>  wk_ptr_b<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 将wk_ptr_b的指向清空</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>wk_ptr_b<span class="token punctuation">.</span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"wk_ptr_b is invalid"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出：wk_ptr_b is invalid 说明改指针已经无效</span>  <span class="token punctuation">}</span>  wk_ptr_b <span class="token operator">=</span> ptr_b<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wk_ptr_b<span class="token punctuation">.</span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      wk_ptr_b<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出：this is class CB! 调用赋值操作后，wk_ptr_b恢复有效</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 最后输出的引用计数还是1，说明之前使用weak_ptr类型赋值，不会影响引用计数</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ptr_a use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ptr_a use count : 1</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ptr_b use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ptr_b use count : 1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK，三个智能指针，鼓捣明白了吗？</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux上如何查看物理CPU个数,核数,线程数</title>
      <link href="/2019/04/20/linux/Linux-CPU-cores/"/>
      <url>/2019/04/20/linux/Linux-CPU-cores/</url>
      
        <content type="html"><![CDATA[<p>现在的处理器一般都会使用超线程技术来实现并行，超线程技术就是利用特殊的硬件指令，把两个逻辑内核模拟成两个物理芯片，让单个处理器都能使用线程级并行计算，进而兼容多线程操作系统和软件，减少了CPU的闲置时间，提高的CPU的运行效率。</p><a id="more"></a><p>接下来看看物理CPU个数，核数以及线程数的关系</p><p>总核数 = 物理CPU个数 * 每颗物理CPU的核数<br>总逻辑CPU数 = 物理CPU个数 * 每颗物理CPU的核数 * 超线程数</p><p>上述公式中，逻辑CPU数即线程数，即我们常说的4核8线程，32核64线程的线程。</p><ul><li><p>如何查看CPU物理个数</p><pre><code># grep &#39;physical id&#39; /proc/cpuinfo | sort -uphysical id    : 0physical id    : 1</code></pre></li><li><p>如何查看每个物理CPU的核数</p><pre><code># grep &#39;core id&#39; /proc/cpuinfo | sort -u | wc -l8</code></pre></li><li><p>如何查看总的逻辑CPU个数</p><pre><code># grep &#39;processor&#39; /proc/cpuinfo | sort -u | wc -l32</code></pre><p>这个服务器有32个逻辑核，8个物理核，可见该CPU支持并已打开超线程，每个物理核支持两个并行线程。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx反向代理location路径设置</title>
      <link href="/2019/04/19/linux/nginx-location-setting/"/>
      <url>/2019/04/19/linux/nginx-location-setting/</url>
      
        <content type="html"><![CDATA[<p>nginx反向代理路径的配置规则，路径最后有<code>/</code>和没<code>/</code>的区别。</p><a id="more"></a><h4 id="一-location匹配路径末尾没有"><a href="#一-location匹配路径末尾没有" class="headerlink" title="一. location匹配路径末尾没有 /"></a>一. location匹配路径末尾没有 /</h4><p>此时proxy_pass后面的路径必须和location设置的路径一致：</p><pre><code>location /index{   proxy_redirect off;   proxy_set_header        Host $host;   proxy_set_header        X-Real-IP $remote_addr;   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;   proxy_pass http://localhost:8080/index;}</code></pre><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index/index.html" target="_blank" rel="noopener">http://localhost:8080/index/index.html</a></p><h4 id="二-location匹配路径末尾有"><a href="#二-location匹配路径末尾有" class="headerlink" title="二. location匹配路径末尾有 /"></a>二. location匹配路径末尾有 /</h4><p>此时proxy_pass后面的路径需要分为以下四种情况讨论：</p><ul><li>proxy_pass后面的路径只有域名且最后没有 /：<pre><code>location /index/{ proxy_redirect off; proxy_set_header        Host $host; proxy_set_header        X-Real-IP $remote_addr; proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080;}</code></pre></li></ul><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index/index.html" target="_blank" rel="noopener">http://localhost:8080/index/index.html</a></p><ul><li><p>proxy_pass后面的路径只有域名同时最后有 /：</p><pre><code>location /index/{ proxy_redirect off; proxy_set_header        Host $host; proxy_set_header        X-Real-IP $remote_addr; proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080/;}</code></pre><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a></p></li><li><p>proxy_pass后面的路径还有其他路径但是最后没有 /：</p><pre><code>location /index/{ proxy_redirect off; proxy_set_header        Host $host; proxy_set_header        X-Real-IP $remote_addr; proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080/test;}</code></pre></li></ul><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/testindex.html" target="_blank" rel="noopener">http://localhost:8080/testindex.html</a></p><ul><li>proxy_pass后面的路径还有其他路径同时最后有 /：<pre><code>location /index/{ proxy_redirect off; proxy_set_header        Host $host; proxy_set_header        X-Real-IP $remote_addr; proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080/test/;}</code></pre></li></ul><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index/index.html" target="_blank" rel="noopener">http://localhost:8080/index/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非root用户安装ngnix</title>
      <link href="/2019/04/18/linux/install-ngnix-without-root/"/>
      <url>/2019/04/18/linux/install-ngnix-without-root/</url>
      
        <content type="html"><![CDATA[<p>如果在开发机上没有root权限，怎么搭建自己的nginx服务。</p><a id="more"></a><h4 id="非root用户从源码编译安装nginx"><a href="#非root用户从源码编译安装nginx" class="headerlink" title="非root用户从源码编译安装nginx"></a>非root用户从源码编译安装nginx</h4><ul><li>获取依赖库nginx依赖pcre和zlib两个库,openssl库非必须，但一般都加上，https支持需要<pre><code>wget https://sourceforge.net/projects/libpng/files/zlib/1.2.11/zlib-1.2.11.tar.gztar zxvf zlib-1.2.11.tar.gzwget https://sourceforge.net/projects/pcre/files/pcre/8.43/pcre-8.43.tar.gztar zxvf pcre-8.43.tar.gzwget https://www.openssl.org/source/openssl-1.0.2r.tar.gztar zxvf openssl-1.0.2r.tar.gz</code></pre></li></ul><p>pcre源码在<a href="https://sourceforge.net/projects/pcre/files/pcre/" target="_blank" rel="noopener">https://sourceforge.net/projects/pcre/files/pcre/</a>可自行选择版本  </p><p>zlib源码在<a href="https://sourceforge.net/projects/libpng/files/zlib/" target="_blank" rel="noopener">https://sourceforge.net/projects/libpng/files/zlib/</a>,可自行选择版本  </p><p>openssl源码在<a href="https://www.openssl.org/source/" target="_blank" rel="noopener">https://www.openssl.org/source/</a>,可自行选择版本  </p><p>解压后无需安装自己编译的话nginx是通过源码依赖这些库的。</p><ul><li><p>获取nginx源码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://nginx.org/download/nginx-1.14.2.tar.gz<span class="token function">tar</span> zxvf nginx-1.14.2.tar.gz<span class="token function">cd</span> nginx-1.14.2<span class="token comment" spellcheck="true"># 指定安装路径和pcre、zlib源代码位置,pcre和zlib的路径都是上面解压的源码路径</span>./configure --prefix<span class="token operator">=</span>/path/to/nginx --with-pcre<span class="token operator">=</span>/path/to/pcre --with-zlib<span class="token operator">=</span>/path/to/zlib --with-openssl<span class="token operator">=</span>/path/to/openssl<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx源码在<a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">https://nginx.org/en/download.html</a>,可自己选择版本。</p></li><li><p>修改环境变量</p><pre><code>export PATH=$PATH:/path/to/nginx/sbin</code></pre></li><li><p>修改端口，将由于非root，所有无法绑定1024以下的端口，在<code>ngnix.conf</code>将nginx绑定的端口改成大于1024的，比如8080。启动ngnix  <code>nohup ngnix &gt;&gt; nginx.log &amp;</code>。 这是访问<a href="http://host:8080就可以看到nginx主页了。">http://host:8080就可以看到nginx主页了。</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装升级cmake</title>
      <link href="/2019/04/16/linux/ubuntu-upgrade-cmake/"/>
      <url>/2019/04/16/linux/ubuntu-upgrade-cmake/</url>
      
        <content type="html"><![CDATA[<p>cmake 安装升级避坑指南。</p><a id="more"></a><h4 id="1-通过ppa安装"><a href="#1-通过ppa安装" class="headerlink" title="1.通过ppa安装"></a>1.通过ppa安装</h4><ul><li>apt repository 加入ppa<pre><code>sudo apt-get install software-properties-commonsudo add-apt-repository ppa:george-edison55/cmake-3.xsudo apt-get update</code></pre></li><li>如果系统默认自带了老版本的cmake，先卸载<pre><code>sudo apt-get remove cmake</code></pre></li><li>安装cmake<pre><code>sudo apt-get install cmake</code></pre></li></ul><h4 id="2-从源码编译安装（可以非root用户安装）"><a href="#2-从源码编译安装（可以非root用户安装）" class="headerlink" title="2.从源码编译安装（可以非root用户安装）"></a>2.从源码编译安装（可以非root用户安装）</h4><ul><li><p>获取源码编译</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 源码可以从[https://cmake.org/files/](https://cmake.org/files/)获得，选择你希望安装的版本，以3.7为例</span><span class="token function">wget</span> https://cmake.org/files/v3.7/cmake-3.7.0.tar.gz<span class="token function">tar</span> xf cmake-3.7.0.tar.gz<span class="token function">cd</span> cmake-3.7.0<span class="token comment" spellcheck="true"># 如果没有root权限， ./configure --prefix=/user/home/dev   --prefix 设置用户有写入权限的安装路径</span>./configure<span class="token function">make</span><span class="token comment" spellcheck="true"># 如果缺少一些编译依赖，执行</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果系统默认自带了老版本的cmake，先卸载</p><pre><code>sudo apt-get remove cmake</code></pre></li><li><p>安装</p><ul><li><code>checkinstall</code>方式安装，<code>checkinstall</code>的方式安装会生成deb包，比较便于管理，后续卸载也方便，比较推荐。<pre><code> sudo apt-get install checkinstall sudo checkinstall  # 非root不用sudo</code></pre></li><li><code>make install</code> 方式安装，如果非root，不用sudo。<pre><code>make install</code></pre></li></ul></li></ul><p><strong>备注:</strong> 如果系统自带着低版本的cmake需要升级，比较靠谱的办法还是先卸载了，再重装，<code>sudo apt-get upgrade</code>的方法不一定能成功。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu命令行查看网络流量</title>
      <link href="/2019/04/15/linux/ubuntu-net-stats-in-termial/"/>
      <url>/2019/04/15/linux/ubuntu-net-stats-in-termial/</url>
      
        <content type="html"><![CDATA[<p>命令行查看网络流量的几个小工具。</p><a id="more"></a><h4 id="1-nethogs"><a href="#1-nethogs" class="headerlink" title="1.nethogs"></a>1.nethogs</h4><p>nethogs可以查看实时进程网络占用。<br>安装： <code>sudo apt install nethogs</code><br>查看网络状态： <code>nethogs 网卡</code>，如 <code>nethogs eth0</code><br>网卡可以使用 <code>ifconfig</code> 查看</p><p><img src="http://img.kingway.fun/IMGMatrix/blog/linux/net002.png" alt=""></p><h4 id="2-bmon"><a href="#2-bmon" class="headerlink" title="2.bmon"></a>2.bmon</h4><p>安装 <code>sudo apt-get install bmon</code><br>查看所有网卡 <code>bmon</code><br>查看特定网卡 <code>bmon -p eth0</code><br>网卡可以使用 <code>ifconfig</code> 查看  </p><ul><li>使用上下按键选择要显示的网卡</li><li>输入g控制流量面板的显示和隐藏 </li><li>输入d控制详情信息的显示和隐藏 </li><li>输入q退出面板 </li></ul><p><img src="http://img.kingway.fun/IMGMatrix/blog/linux/net001.jpeg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows上使用git仓库的问题</title>
      <link href="/2019/03/17/linux/issues-using-git-in-windows/"/>
      <url>/2019/03/17/linux/issues-using-git-in-windows/</url>
      
        <content type="html"><![CDATA[<p>团队开发过程中经常会使用git工具来管理代码，团队中成员使用的终端可能是windows和类Unix系统，由于操作系统的差异可能会给大家使用git带来一些困扰。尤其是将类Unix系统中建立的仓库在windows系统打开的时候。在windows上使用<code>*nix</code>建立的仓库主要处理好三个事情，换行符、文件权限、软连接。</p><a id="more"></a><h4 id="1-处理换行符"><a href="#1-处理换行符" class="headerlink" title="1.处理换行符"></a>1.处理换行符</h4><p>&#160; &#160; &#160; &#160;换行符在各个系统中有不同的表示，一般使用两种符号，一种是<code>LF\n</code>换行,一种是<code>CR\r</code>回车。windows系统使用的是<code>\r\n</code>, unix系统使用的是<code>\r</code>,linux系统使用的是<code>\n</code>。这样就导致从不同系统checkout代码时出现文件未修改却出现modified的情况，git对此有自动转换的机制，设置<code>core.autocrlf</code>为<code>true</code>,在checkout和checkin时就会自动转换换行符。</p><pre><code>git config --global core.autocrlf true</code></pre><h4 id="2-处理权限"><a href="#2-处理权限" class="headerlink" title="2.处理权限"></a>2.处理权限</h4><p>*nix系统对拥有者、组、其他几种用户都有明确的读写执行权限，这些在windows上没有对应的机制，这个问题在使用git时表现为没有修改文件却出现很多modified的文件，<code>git status</code>显示 typechange。一般出现在增加可执行权限的文件上。git对此也有一定的策略，可以设置<code>core.filemode</code>为<code>false</code>,这样就会忽略文件权限带来的改变。</p><pre><code>git config --add core.filemode false</code></pre><p>如果clone前没有设置，导致已经进行了修改，可以用下面的命令来批量恢复这些修改。</p><pre><code>git status | grep typechange | awk &#39;{print $2}&#39; | xargs git checkout</code></pre><h4 id="3-处理软链接"><a href="#3-处理软链接" class="headerlink" title="3.处理软链接"></a>3.处理软链接</h4><p>这可能是最让人头疼的问题，在*nix系统里我们经常会使用<code>ln</code>来给文件和文件夹设置软链接，而这些软链接到windwos就失效了，不能进行导航，ide也不识别，如果有关键文件夹设置了软链接，仓库在windows上就基本不可用了。这也是笔者遇到的一大难题。  </p><p>git暂时还不能像处理换行符一样优雅的处理软链接，需要我们自己手动来处理。windows中也有自己的软链接实现方式，建立软链接使用<code>mklink</code>命令，<code>mklink</code>的使用文档是这么写的：</p><blockquote><p>MKLINK [[/D] | [/H] | [/J]] Link Target  </p></blockquote><blockquote><p>/D creates a symbolic link, or a soft link.This essentially acts like a shortcut to a folder in prior versions of Windows, except you don’t have to use an actual shortcut.  </p></blockquote><blockquote><p>/H creates a hard link, which points directly to the file.This option can’t be used for folders directly for some reason, you’ll have to use the next option.  </p></blockquote><blockquote><p>/J creates a “Directory Junction”A Directory Junction is actually just a hard link to a directory. This is a feature that existed prior to Vista as well. If you are trying to symlink to a directory using a hard link, then you should use this option.</p></blockquote><p>主要就分为三种，<code>/D</code> <code>/J</code> <code>/H</code>,<code>/D</code>和<code>/J</code>用于目录，<code>/H</code>用于文件，对链接的修改对不会影响源文件，<code>/D</code>和<code>/J</code>不会占用空间，<code>/H</code>会占用空间。具体可以参考<a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mklink" target="_blank" rel="noopener">mklink</a>. </p><p>现在我们就要将*nix中的所有软链接换成windows的link，主要三步：</p><ul><li>找到软链接文件<ul><li>使用<code>git ls-files -s</code>,git把所有的软链接设置成<code>120000</code>类型</li></ul></li><li>修改软链接<ul><li>使用<code>mklink</code>命令</li></ul></li><li>屏蔽软链接的修改<ul><li>使用<code>git update-index --assume-unchanged</code>  </li></ul></li></ul><p>上述步骤已经整理成一个python脚本，可以从我的<a href="https://gist.github.com/pkufool/b9ad6830e60058070f84eb1762ad5a14" target="_blank" rel="noopener">gist</a>获得。脚本只在<a href="https://babun.github.io/" target="_blank" rel="noopener">Babun-windows上最好用的终端</a> 测试过，其他终端可能无法使用，如有错误请自行修改。</p><p>考虑国内访问github速度，贴出脚本如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">rindex</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> lst<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true"># find symbol link files or dirs</span>fp <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"git ls-files -s | awk '/120000/{print $4}'"</span><span class="token punctuation">)</span>links <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># get symbol links' parent dir</span>link_dir <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>    index <span class="token operator">=</span> rindex<span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      link_dir<span class="token punctuation">.</span>add<span class="token punctuation">(</span>link<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      link_dir<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>work_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># make link for every symbol link</span><span class="token keyword">for</span> d <span class="token keyword">in</span> link_dir<span class="token punctuation">:</span>  os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>work_dir<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fp <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"ls -la"</span><span class="token punctuation">)</span>  items <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"->"</span> <span class="token keyword">in</span> item<span class="token punctuation">:</span>      tks <span class="token operator">=</span> item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span>      src <span class="token operator">=</span> tks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>      dst <span class="token operator">=</span> tks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>dst<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dst <span class="token operator">=</span> <span class="token string">"\\\\"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dst<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        dst <span class="token operator">=</span> dst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"link "</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> dst<span class="token punctuation">)</span>      os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"rm "</span> <span class="token operator">+</span> src<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"cmd /c mklink /H "</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> dst<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"cmd /c mklink /j "</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> dst<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># make links unchanged </span>      os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"git update-index --assume-unchanged "</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> src<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一分钟学git stash</title>
      <link href="/2019/03/10/linux/git-stash-in-one-minute/"/>
      <url>/2019/03/10/linux/git-stash-in-one-minute/</url>
      
        <content type="html"><![CDATA[<p>在使用git管理代码时会经常使用到<code>git stash</code>这个命令，一分钟复习一下。<br>一般什么情况下会用stash呢？当前修改还没完成，或者暂时不想<code>commit</code>，然而需要做<code>pull</code>，<code>merge</code>或者<code>checkout</code>到其他分支的操作，一般会用stash将修改暂时储藏。<br>接下来我们复习一些<code>stash</code>的三板斧，增、删、恢复。</p><a id="more"></a><ul><li><p>增加储藏<br>任何时候想要<code>stash</code>当前的修改，只需要用<code>git stash</code>命令，git会按栈的方式按先后顺序记录。</p><pre><code>git stash# save -a 增加助记messagegit stash save -a &quot;message&quot;</code></pre></li><li><p>查看储藏<br>查看储藏使用<code>git stash list</code>命令，所有储藏按先后顺序出现，<code>stash@{0}</code>表示最近一次储藏。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> stash liststash@<span class="token punctuation">{</span>0<span class="token punctuation">}</span>: WIP on master: 049d078 added the index <span class="token function">file</span>stash@<span class="token punctuation">{</span>1<span class="token punctuation">}</span>: WIP on master: c264051 Revert <span class="token string">"added file_size"</span>stash@<span class="token punctuation">{</span>2<span class="token punctuation">}</span>: WIP on master: 21d80a5 added number to log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>应用储藏<br>将储藏重新应用有两种方式，<code>git stash pop</code>和<code>git stash apply</code>，pop应用后会将储藏删除，而apply不会删除。另外，<strong>stash操作是不随分支的，无论在哪个分支的stash，都可以应用到任何分支</strong>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 默认apply最近的一次stash</span><span class="token function">git</span> stash apply <span class="token comment" spellcheck="true"># apply 以前的stash</span><span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span>2<span class="token punctuation">}</span>默认pop最近的一次stash<span class="token function">git</span> stash pop <span class="token comment" spellcheck="true"># pop以前的stash</span><span class="token function">git</span> stash pop stash@<span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># pop 之后会删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>撤回储藏<br>有时候应用储藏后，会有撤回的需求，比如你正在修改文件，然后apply了一个储存，之后又不想要储存里apply的修改了，可以运用撤回来清除这个储藏。</p><pre><code>git stash show -p stash@{0} | git apply -R# 如果没有指定则会撤回最近的储藏git stash show -p | git apply -R</code></pre></li><li><p>删除储藏<br>用apply应用的储藏是不会删除的，需要手工删除，可以通过drop来做，可以指定stash，也可以clear全部删除（慎用）</p><pre><code>git stash drop stash@{0}# 全部删除git stash drop clear</code></pre></li><li><p>从储藏创建分支<br>有时候一些修改希望单独出一个分支来继续改进，那么可以将这个stash直接checkout成一个单独的分支。</p><pre><code>git stash branch testchanges</code></pre><p>OK，<code>git stash</code>就这三板斧，记起来了吗？</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
