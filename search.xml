<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux Cpu调度策略与实践</title>
      <link href="/2020/06/25/os/linux_sched/"/>
      <url>/2020/06/25/os/linux_sched/</url>
      
        <content type="html"><![CDATA[<p>先举个栗子</p><a id="more"></a><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/resource.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>class Thread <span class="token punctuation">{</span> public<span class="token punctuation">:</span>  <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token operator">~</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid_<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> Thread<span class="token punctuation">:</span><span class="token punctuation">:</span>RunThread<span class="token punctuation">,</span> this<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Thread create failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">strerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Final result for thread "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">" is "</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">pthread_setname_np</span><span class="token punctuation">(</span>tid_<span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Thread "</span> <span class="token operator">&lt;&lt;</span> tid_ <span class="token operator">&lt;&lt;</span> <span class="token string">" setname failed: "</span>                <span class="token operator">&lt;&lt;</span> <span class="token function">strerror</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">SetNiceValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> nice<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nice_ <span class="token operator">=</span> nice<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">BindCpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> cpus<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cpus<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cpu_set_t cpuset<span class="token punctuation">;</span>    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpuset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> id <span class="token punctuation">:</span> cpus<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">CPU_SET</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"set cpu count: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">CPU_COUNT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpuset<span class="token punctuation">)</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">" for thread:"</span> <span class="token operator">&lt;&lt;</span> tid_<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_setaffinity_np</span><span class="token punctuation">(</span>tid_<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cpuset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to call pthread_setaffinity_np."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">SetSchedulerPolicy</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>string<span class="token operator">&amp;</span> policy<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> sched_param param<span class="token punctuation">;</span>    <span class="token keyword">int</span> policy_type <span class="token operator">=</span> SCHED_OTHER<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token string">"SCHED_OTHER"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      policy_type <span class="token operator">=</span> SCHED_OTHER<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token string">"SCHED_FIFO"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      policy_type <span class="token operator">=</span> SCHED_FIFO<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token string">"SCHED_RR"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      policy_type <span class="token operator">=</span> SCHED_RR<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token string">"SCHED_BATCH"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      policy_type <span class="token operator">=</span> SCHED_BATCH<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>policy <span class="token operator">==</span> <span class="token string">"SCHED_IDLE"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      policy_type <span class="token operator">=</span> SCHED_IDLE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> old_policy<span class="token punctuation">,</span> old_priority<span class="token punctuation">;</span>    <span class="token function">pthread_getschedparam</span><span class="token punctuation">(</span>tid_<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old_policy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    old_priority <span class="token operator">=</span> param<span class="token punctuation">.</span>sched_priority<span class="token punctuation">;</span>    param<span class="token punctuation">.</span>sched_priority <span class="token operator">=</span> priority<span class="token punctuation">;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">pthread_setschedparam</span><span class="token punctuation">(</span>tid_<span class="token punctuation">,</span> policy_type<span class="token punctuation">,</span> <span class="token operator">&amp;</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pthread_setschedparam failed, return value : "</span>                <span class="token operator">&lt;&lt;</span> <span class="token function">strerror</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"old policy : "</span> <span class="token operator">&lt;&lt;</span> old_policy              <span class="token operator">&lt;&lt;</span> <span class="token string">", old priority : "</span> <span class="token operator">&lt;&lt;</span> old_priority              <span class="token operator">&lt;&lt;</span> <span class="token string">", new policy : "</span> <span class="token operator">&lt;&lt;</span> policy_type              <span class="token operator">&lt;&lt;</span> <span class="token string">", priority : "</span> <span class="token operator">&lt;&lt;</span> priority<span class="token punctuation">;</span>  <span class="token punctuation">}</span> private<span class="token punctuation">:</span>  <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">RunThread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread<span class="token operator">*</span> t <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span>Thread<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">setpriority</span><span class="token punctuation">(</span>PRIO_PROCESS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> t<span class="token operator">-></span>nice_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Setpriority for thread "</span> <span class="token operator">&lt;&lt;</span> t<span class="token operator">-></span>tid_                <span class="token operator">&lt;&lt;</span> <span class="token string">" failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Setpriority for thread "</span> <span class="token operator">&lt;&lt;</span> t<span class="token operator">-></span>tid_                <span class="token operator">&lt;&lt;</span> <span class="token string">" to "</span> <span class="token operator">&lt;&lt;</span> t<span class="token operator">-></span>nice_ <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    t<span class="token operator">-></span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  pthread_t tid_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> nice_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feature Extraction for ASR: Pitch</title>
      <link href="/2020/04/26/ASR/kaldi-pitch/"/>
      <url>/2020/04/26/ASR/kaldi-pitch/</url>
      
        <content type="html"><![CDATA[<p>Pitch即音调、音高，是人类对声音的一种感知，想必大家都还记得中学物理中讲过的声音的三个特性：响度、音调、音色。所以Pitch在语音识别中是个很重要的特征。Pitch可以量化为频率，称为基本频率（F0）。字词中音调及音调的变化构成了像中文这样音调语言的语调，所以Pitch特征在音调类语言识别中更为重要。</p><a id="more"></a><p>Pitch特征提取就是计算声音基频（F0）的过程，有很多的方法可以获取声音的基频，本文将要介绍的是Kaldi语音识别工具包中的Pitch特征提取，Kaldi中提取Pitch的方法是一种基于时域的方法，论文<a href="https://docs.qq.com/pdf/DRUVqYk5WdFdXT3hC" target="_blank" rel="noopener">(Ghahremani et al., 2014)</a>发表于2014年的ICASSP会议，该方法源自发表于1995年的RAPT<a href="https://docs.qq.com/pdf/DRVplRmp5eUJtSVhr" target="_blank" rel="noopener">(David Talkin, 1995)</a>。其他一些提取Pitch的方法可以在Kaldi的论文中找到，比如Yin、SAcC、SWIPE、YAAPT等，<del>作者开门见山说我们找了一下现在有哪些方法可以提取Pitch，一一做了实验后发现Getf0这个方法最靠谱，于是打算改一下，不得不感叹大佬们写文章就是这么任性。</del></p><p>本文将详细介绍RAPT算法的主要思想，以及Kaldi对RAPT的一些修改，最后尝试对Kaldi的源代码做个简单解读。</p><h3 id="Mathematics"><a href="#Mathematics" class="headerlink" title="Mathematics"></a>Mathematics</h3><p>介绍RAPT算法之前先复习一下相关的数学基础，自相关和互相关函数。</p><h4 id="Cross-correlation-and-Autocorrelation"><a href="#Cross-correlation-and-Autocorrelation" class="headerlink" title="Cross-correlation and Autocorrelation"></a>Cross-correlation and Autocorrelation</h4><p>在信号处理中，互相关一般是用来度量两个向量之间的相似度，它是一个向量相对与另一个向量的偏移的函数，所以也叫做滑动内积，常用来在一个长的信号中搜索一些短片段特征（可以简单的理解为搜索substr的操作），关于互相关的详细内容可以参考<a href="https://en.wikipedia.org/wiki/Cross-correlation" target="_blank" rel="noopener">wikipedia</a>。<br>对于连续函数f和g，互相关定义如下：</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.159ex" xmlns="http://www.w3.org/2000/svg" width="43.832ex" height="5.553ex" role="img" focusable="false" viewBox="0 -1500.3 19373.7 2454.6" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(1161.2, 0)"><use xlink:href="#MJX-TEX-N-22C6"></use></g><g data-mml-node="mi" transform="translate(1883.4, 0)"><use xlink:href="#MJX-TEX-I-1D454"></use></g><g data-mml-node="mo" transform="translate(2360.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2749.4, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3138.4, 0)"><use xlink:href="#MJX-TEX-I-1D70F"></use></g><g data-mml-node="mo" transform="translate(3655.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(4322.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(5378, 0)"><use xlink:href="#MJX-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(5928, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(6317, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g><g data-mml-node="mo" transform="translate(6678, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(7289.2, 0)"><use xlink:href="#MJX-TEX-N-22C6"></use></g><g data-mml-node="mi" transform="translate(8011.4, 0)"><use xlink:href="#MJX-TEX-I-1D454"></use></g><g data-mml-node="mo" transform="translate(8488.4, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(8877.4, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g><g data-mml-node="mo" transform="translate(9238.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(9905.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msubsup" transform="translate(10961, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-LO-222B"></use></g><g data-mml-node="TeXAtom" transform="translate(1013.4, 1088.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-N-221E"></use></g></g><g data-mml-node="TeXAtom" transform="translate(556, -896.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-N-221E"></use></g></g></g><g data-mml-node="mi" transform="translate(13448.3, 0)"><use xlink:href="#MJX-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(13998.3, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(14387.3, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g><g data-mml-node="mo" transform="translate(14748.3, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(15137.3, 0)"><use xlink:href="#MJX-TEX-I-1D454"></use></g><g data-mml-node="mo" transform="translate(15614.3, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(16003.3, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g><g data-mml-node="mo" transform="translate(16586.5, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(17586.7, 0)"><use xlink:href="#MJX-TEX-I-1D70F"></use></g><g data-mml-node="mo" transform="translate(18103.7, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(18492.7, 0)"><use xlink:href="#MJX-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(19012.7, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g></g></g></svg></mjx-container></p><p>而对于离散函数则有：</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 53.567ex"><svg style="vertical-align: -2.681ex; min-width: 53.567ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.494ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1685.1)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1685.1) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="9760.4 -1685.1 1 2870.2"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 22.9)"><g data-mml-node="mtd"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1183.2, 0)"><use xlink:href="#MJX-TEX-N-22C6"></use></g><g data-mml-node="mi" transform="translate(1905.4, 0)"><use xlink:href="#MJX-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(2395.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2784.4, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3173.4, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(4051.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(4718.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(5774, 0)"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(6346, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(6624, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(7224, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(7724.2, 0)"><use xlink:href="#MJX-TEX-N-22C6"></use></g><g data-mml-node="mi" transform="translate(8446.4, 0)"><use xlink:href="#MJX-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(8936.4, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(9214.4, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(9814.4, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(10370.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="munderover" transform="translate(11426, 0)"><g data-mml-node="mo" transform="translate(393.8, 0)"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(0, -1050) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(1378, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(2156, 0)"><use xlink:href="#MJX-TEX-N-221E"></use></g></g><g data-mml-node="TeXAtom" transform="translate(487.2, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-N-221E"></use></g></g></g><g data-mml-node="mi" transform="translate(13824.3, 0)"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(14396.3, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(14785.3, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(15385.3, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(15774.3, 0)"><use xlink:href="#MJX-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(16264.3, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(16542.3, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(17642.5, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(18642.7, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(19242.7, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1685.1 1 2870.2"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-1" transform="translate(0, 22.9)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-31" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(889, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>这里m表示滞后（lag）即偏移，看到这两个公式是不是觉得跟计算卷积的公式很像，他们的确本质上差不多，只是差了个符号而已，卷积公式的定义如下：</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.159ex" xmlns="http://www.w3.org/2000/svg" width="43.832ex" height="5.553ex" role="img" focusable="false" viewBox="0 -1500.3 19373.7 2454.6" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(1161.2, 0)"><use xlink:href="#MJX-TEX-N-2217"></use></g><g data-mml-node="mi" transform="translate(1883.4, 0)"><use xlink:href="#MJX-TEX-I-1D454"></use></g><g data-mml-node="mo" transform="translate(2360.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2749.4, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3138.4, 0)"><use xlink:href="#MJX-TEX-I-1D70F"></use></g><g data-mml-node="mo" transform="translate(3655.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(4322.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(5378, 0)"><use xlink:href="#MJX-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(5928, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(6317, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g><g data-mml-node="mo" transform="translate(6678, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(7289.2, 0)"><use xlink:href="#MJX-TEX-N-2217"></use></g><g data-mml-node="mi" transform="translate(8011.4, 0)"><use xlink:href="#MJX-TEX-I-1D454"></use></g><g data-mml-node="mo" transform="translate(8488.4, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(8877.4, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g><g data-mml-node="mo" transform="translate(9238.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(9905.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msubsup" transform="translate(10961, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-LO-222B"></use></g><g data-mml-node="TeXAtom" transform="translate(1013.4, 1088.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-N-221E"></use></g></g><g data-mml-node="TeXAtom" transform="translate(556, -896.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-N-221E"></use></g></g></g><g data-mml-node="mi" transform="translate(13448.3, 0)"><use xlink:href="#MJX-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(13998.3, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(14387.3, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g><g data-mml-node="mo" transform="translate(14748.3, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(15137.3, 0)"><use xlink:href="#MJX-TEX-I-1D454"></use></g><g data-mml-node="mo" transform="translate(15614.3, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(16003.3, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g><g data-mml-node="mo" transform="translate(16586.5, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(17586.7, 0)"><use xlink:href="#MJX-TEX-I-1D70F"></use></g><g data-mml-node="mo" transform="translate(18103.7, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(18492.7, 0)"><use xlink:href="#MJX-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(19012.7, 0)"><use xlink:href="#MJX-TEX-I-1D461"></use></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 53.567ex"><svg style="vertical-align: -2.681ex; min-width: 53.567ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.494ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1685.1)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1685.1) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="9760.4 -1685.1 1 2870.2"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 22.9)"><g data-mml-node="mtd"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1183.2, 0)"><use xlink:href="#MJX-TEX-N-2217"></use></g><g data-mml-node="mi" transform="translate(1905.4, 0)"><use xlink:href="#MJX-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(2395.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2784.4, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3173.4, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(4051.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(4718.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(5774, 0)"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(6346, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(6624, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(7224, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(7724.2, 0)"><use xlink:href="#MJX-TEX-N-2217"></use></g><g data-mml-node="mi" transform="translate(8446.4, 0)"><use xlink:href="#MJX-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(8936.4, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(9214.4, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(9814.4, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(10370.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="munderover" transform="translate(11426, 0)"><g data-mml-node="mo" transform="translate(393.8, 0)"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(0, -1050) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(1378, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(2156, 0)"><use xlink:href="#MJX-TEX-N-221E"></use></g></g><g data-mml-node="TeXAtom" transform="translate(487.2, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-N-221E"></use></g></g></g><g data-mml-node="mi" transform="translate(13824.3, 0)"><use xlink:href="#MJX-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(14396.3, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(14785.3, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(15385.3, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(15774.3, 0)"><use xlink:href="#MJX-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(16264.3, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(16542.3, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(17642.5, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(18642.7, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(19242.7, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1685.1 1 2870.2"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-2" transform="translate(0, 22.9)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-32" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(889, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>下面这张图展示了卷积，自相关和互相关之间的异同，自相关定义为函数与自身的互相关。</p><p><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/convolution-vs-correlation.png" alt=""></p><p>可以看到自相关函数在波形重合的地方会出现峰值，这个特性使得他可以用来发现序列中的重复模式（即周期），例如在lag为0是（完全重合）时有一个峰值。对于周期信号而言，自相关函数的峰值会出现在函数周期或者函数周期整数倍的地方，下面这个gif可以直观体现这一特性。所以利用自相关函数可以用来在时域上获取基频（f0)的值，这就算RAPT 算法的数学基础。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/7/71/Cross_correlation_animation.gif" alt=""></p><h4 id="Normalized-Cross-Correlation-Function"><a href="#Normalized-Cross-Correlation-Function" class="headerlink" title="Normalized Cross-Correlation Function"></a>Normalized Cross-Correlation Function</h4><p>在实际提取特征是会对语音信号进行分帧，在帧这样一个级别的粒度计算，我们假设一帧有N个采样点，那么自相关（ACF）可以这样计算：</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 39.044ex"><svg style="vertical-align: -2.921ex; min-width: 39.044ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.974ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1791.3)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1791.3) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="6550.8 -1791.3 1 3082.6"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 28)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D445"></use></g><g data-mml-node="mi" transform="translate(759, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(1053, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1331, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(2209, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2764.7, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="munderover" transform="translate(3820.5, 0)"><g data-mml-node="mo" transform="translate(1159.9, 0)"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(1139.1, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(1378, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g></g><g data-mml-node="TeXAtom" transform="translate(0, 1172.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(723, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1501, 0)"><use xlink:href="#MJX-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(2389, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(3167, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(3667, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(4445, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mi" transform="translate(7751.1, 0)"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(8220.1, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(8498.1, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(9098.1, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mi" transform="translate(9376.1, 0)"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(9845.1, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(10123.1, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(11223.3, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(12223.5, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(12823.5, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1791.3 1 3082.6"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-3" transform="translate(0, 28)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-33" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(889, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>互相关（CCF）这样计算：</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 36.551ex"><svg style="vertical-align: -2.921ex; min-width: 36.551ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.974ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1791.3)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1791.3) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="5999.8 -1791.3 1 3082.6"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 28)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44B"></use></g><g data-mml-node="mi" transform="translate(828, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(1122, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1400, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(2278, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2833.7, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="munderover" transform="translate(3889.5, 0)"><g data-mml-node="mo" transform="translate(574.5, 0)"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(553.7, -1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(1378, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g></g><g data-mml-node="TeXAtom" transform="translate(0, 1172.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(723, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1501, 0)"><use xlink:href="#MJX-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(2389, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(3167, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g><g data-mml-node="mi" transform="translate(6649.1, 0)"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(7118.1, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(7396.1, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(7996.1, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mi" transform="translate(8274.1, 0)"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(8743.1, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(9021.1, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(10121.3, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(11121.5, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(11721.5, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1791.3 1 3082.6"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-4" transform="translate(0, 28)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-34" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(889, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.636ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 723 851.8" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g></g></g></svg></mjx-container> 表示这一帧起始的帧索引，这两个计算公式看起来非常相像，只是使用的数据略有不同，自相关函数计算时将超出本帧的部分都做了补零，而互相关函数计算时则使用了下一帧的数据，所以实际上计算自相关和互相关用了不同的数据，自相关时只用到了 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.148ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7137.3 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(469, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="msub" transform="translate(747, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(1747.7, 0)"><use xlink:href="#MJX-TEX-N-3A"></use></g><g data-mml-node="msub" transform="translate(2303.5, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(3248.7, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(4248.9, 0)"><use xlink:href="#MJX-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(5359.1, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(6359.3, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(6859.3, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container> 范围的数据，而互相关则用得多一些，为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="20.9ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9237.8 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(469, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="msub" transform="translate(747, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(1747.7, 0)"><use xlink:href="#MJX-TEX-N-3A"></use></g><g data-mml-node="msub" transform="translate(2303.5, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(3248.7, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(4248.9, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(5349.1, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(6349.3, 0)"><use xlink:href="#MJX-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(7459.6, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(8459.8, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(8959.8, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container>。</p><p>从计算中可以看出，ACF的问题是随着偏移的增大，计算的序列就越短，显然不同的偏移的数据是不可比较的，而CCF的计算同样存在问题，由于使用到了下一帧的数据，那么偏移后的数据就有可能变得很大或者很小（比如当前帧在静音与话音的交接处），得出的数据依然不可比较。为此必须使用归一划使得不同的偏移统一成可比较的数值，这就是 Normalized Cross-Correlation Function（NCCF）。</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 39.524ex"><svg style="vertical-align: -2.901ex; min-width: 39.524ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.933ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1782.3)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1782.3) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="6656.8 -1782.3 1 3064.6"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, -62.3)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D719"></use></g><g data-mml-node="mi" transform="translate(596, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(890, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1168, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(2046, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2601.7, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(3657.5, 0)"><g data-mml-node="mrow" transform="translate(220, 876.8)"><g data-mml-node="munderover"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-SO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(1056, 477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(723, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1501, 0)"><use xlink:href="#MJX-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(2389, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(3167, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(1056, -305.2) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(1378, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g></g></g><g data-mml-node="mi" transform="translate(3865.6, 0)"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(4334.6, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(4612.6, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(5212.6, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mi" transform="translate(5490.6, 0)"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(5959.6, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(6237.6, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(7337.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(8338, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(8938, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g><g data-mml-node="msqrt" transform="translate(1224.8, -937.5)"><g transform="translate(1020, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D438"></use></g><g data-mml-node="mo" transform="translate(764, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="msub" transform="translate(1042, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(1765, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mi" transform="translate(2043, 0)"><use xlink:href="#MJX-TEX-I-1D438"></use></g><g data-mml-node="mo" transform="translate(2807, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(3085, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(4185.2, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(5185.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(5908.3, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g><g data-mml-node="mo" transform="translate(0, 67.5)"><use xlink:href="#MJX-TEX-SO-221A"></use></g><rect width="6186.3" height="60" x="1020" y="857.5"></rect></g><rect width="9416" height="60" x="120" y="220"></rect></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1782.3 1 3064.6"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-5" transform="translate(0, -62.3)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-35" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(889, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="3.919ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1732 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D438"></use></g><g data-mml-node="mo" transform="translate(764, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1042, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1454, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container> 是信号在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="14.741ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6515.4 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(469, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(747, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1436.8, 0)"><use xlink:href="#MJX-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(1992.6, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(2626.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(3627, 0)"><use xlink:href="#MJX-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(4737.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(5737.4, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(6237.4, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container> 范围的能量，定义为：</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 26.674ex"><svg style="vertical-align: -2.96ex; min-width: 26.674ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="7.052ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1808.4)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1808.4) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="3816.9 -1808.4 1 3116.9"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 20.2)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D438"></use></g><g data-mml-node="mo" transform="translate(764, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1042, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1454, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2009.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="munderover" transform="translate(3065.6, 0)"><g data-mml-node="mo" transform="translate(464.5, 0)"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(553.7, -1084.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(1378, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g><g data-mml-node="TeXAtom" transform="translate(0, 1205.2) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(412, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1190, 0)"><use xlink:href="#MJX-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(2078, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2856, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g><g data-mml-node="msup" transform="translate(5605.3, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D460"></use></g><g data-mml-node="mn" transform="translate(469, 413) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(6477.8, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(6755.8, 0)"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(7355.8, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1808.4 1 3116.9"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-6" transform="translate(0, 20.2)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-36" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(889, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>这样NCCF的值域在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="14.926ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 6597.1 899" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-N-31"></use><use xlink:href="#MJX-TEX-N-2E" transform="translate(500, 0)"></use><use xlink:href="#MJX-TEX-N-30" transform="translate(778, 0)"></use></g><g data-mml-node="mo" transform="translate(2333.8, 0)"><use xlink:href="#MJX-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(3389.6, 0)"><use xlink:href="#MJX-TEX-I-1D719"></use></g><g data-mml-node="mo" transform="translate(4263.3, 0)"><use xlink:href="#MJX-TEX-N-2264"></use></g><g data-mml-node="mn" transform="translate(5319.1, 0)"><use xlink:href="#MJX-TEX-N-31"></use><use xlink:href="#MJX-TEX-N-2E" transform="translate(500, 0)"></use><use xlink:href="#MJX-TEX-N-30" transform="translate(778, 0)"></use></g></g></g></svg></mjx-container> 之间， 而且当偏移为周期或者周期的整数倍时，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.348ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 596 899" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D719"></use></g></g></g></svg></mjx-container> 值越接近1.0。</p><h3 id="RAPT"><a href="#RAPT" class="headerlink" title="RAPT"></a>RAPT</h3><h4 id="Main-idea"><a href="#Main-idea" class="headerlink" title="Main idea"></a>Main idea</h4><p>我们现在可以使用NCCF来计算F0了，然而计算NCCF是很耗时的操作，为了减少计算量，RAPT运用了两阶段来计算NCCF，主要的步骤如下：</p><ul><li>对音频进行下采样；</li><li>对下采样后的音频计算NCCF， 并记录下局部最大值的位置；</li><li>对原音频数据在上述局部最大值位置的附近计算NCCF，一般来说没一帧都会有好几个候选点；</li><li>使用动态规划算法来获取每一帧的最佳候选点。</li></ul><p>前三点和上面介绍的数学基础并无不同，之是使用了些技巧来减小计算量，而后面的动态规划算法是RAPT的核心部分，下面将着重讲解。</p><h4 id="DP-recursion"><a href="#DP-recursion" class="headerlink" title="DP recursion"></a>DP recursion</h4><p>由于做了分帧，每一个片段都比较短，每一帧不能单纯以NCCF最大值的位置作为F0，而且RAPT是个tracking的算法，目的是要计算F0及跟踪F0的变化，计算中使用了类似维特比算法的动态规划来搜索最佳候选点，下面一边讲解细节，一边来理解为什么要这么做。<br>动态规划算法主要有三个重要的值：全局cost表示到当前步骤为止的代价；局部cost表示当前节点本身的代价；转移cost表示从上一个步骤转到当前步骤的代价。现在将这三个值套到求F0这个算法里面去，定义第i帧第j个候选点的全局cost为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="3.387ex" height="2.261ex" role="img" focusable="false" viewBox="0 -705 1496.9 999.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(715, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g></g></g></svg></mjx-container>, 局部cost为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.749ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 1214.9 736.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(433, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g></g></g></svg></mjx-container>, 从第i-1帧的第k个候选点转移到第i帧的第j个候选点的cost为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="4.052ex" height="2.288ex" role="img" focusable="false" viewBox="0 -717 1790.8 1011.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FF"></use></g><g data-mml-node="TeXAtom" transform="translate(444, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1035, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1313, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g></g></g></svg></mjx-container> 。他们之间的转移关系如下所示:</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 55.433ex"><svg style="vertical-align: -0.619ex; min-width: 55.433ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.369ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -773.5)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 773.5) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="10172.7 -773.5 1 1047.1"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 23.5)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(715, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(1774.6, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2830.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(433, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(4267.5, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(5267.7, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(6145.7, 0)"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="msub" transform="translate(6490.7, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(600, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521, 0)"><use xlink:href="#MJX-TEX-N-2208"></use></g><g data-mml-node="msub" transform="translate(1188, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43C"></use></g><g data-mml-node="TeXAtom" transform="translate(440, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g></g></g><g data-mml-node="mo" transform="translate(9138.7, 0)"><use xlink:href="#MJX-TEX-N-7B"></use></g><g data-mml-node="msub" transform="translate(9638.7, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D437"></use></g><g data-mml-node="TeXAtom" transform="translate(828, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1623, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1901, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(12451.6, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(13451.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FF"></use></g><g data-mml-node="TeXAtom" transform="translate(444, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1035, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1313, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(15242.6, 0)"><use xlink:href="#MJX-TEX-N-7D"></use></g><g data-mml-node="mo" transform="translate(15742.6, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(16187.3, 0)"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(16810.1, 0)"><use xlink:href="#MJX-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(17865.8, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(18555.6, 0)"><use xlink:href="#MJX-TEX-N-2264"></use></g><g data-mml-node="msub" transform="translate(19611.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43C"></use></g><g data-mml-node="mi" transform="translate(440, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -773.5 1 1047.1"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-7" transform="translate(0, 23.5)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-37" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(889, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>初始条件为：</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="25.858ex" height="2.261ex" role="img" focusable="false" viewBox="0 -705 11429.1 999.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(715, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(1884.2, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2940, 0)"><use xlink:href="#MJX-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(3440, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mn" transform="translate(3884.7, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(4662.5, 0)"><use xlink:href="#MJX-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(5718.2, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(6408, 0)"><use xlink:href="#MJX-TEX-N-2264"></use></g><g data-mml-node="msub" transform="translate(7463.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43C"></use></g><g data-mml-node="mn" transform="translate(440, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-30"></use></g></g><g data-mml-node="mo" transform="translate(8307.3, 0)"><use xlink:href="#MJX-TEX-N-3B"></use></g><g data-mml-node="msub" transform="translate(8752, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43C"></use></g><g data-mml-node="mn" transform="translate(440, -150) scale(0.707)"><use xlink:href="#MJX-TEX-N-30"></use></g></g><g data-mml-node="mo" transform="translate(9873.3, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(10929.1, 0)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></svg></mjx-container></p><p>其中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.661ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 734 840.8" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43C"></use></g><g data-mml-node="mi" transform="translate(440, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g></g></g></svg></mjx-container>表示每一帧候选点的个数，亦即使得NCCF达到局部最大值的偏移（lag）的个数。<br>确定了转移关系之后，那么<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="7.806ex" height="2.288ex" role="img" focusable="false" viewBox="0 -717 3450.4 1011.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(433, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(1214.9, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(1659.5, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FF"></use></g><g data-mml-node="TeXAtom" transform="translate(444, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1035, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1313, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g></g></g></svg></mjx-container> 这两个参数怎么来选择呢。显然我们希望NCCF <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.348ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 596 899" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D719"></use></g></g></g></svg></mjx-container> 越大越好， 所以 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.749ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 1214.9 736.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(433, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g></g></g></svg></mjx-container> 应该与其成反比，即 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="10.643ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 4704.3 988.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(433, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(1492.6, 0)"><use xlink:href="#MJX-TEX-N-221D"></use></g><g data-mml-node="mo" transform="translate(2548.4, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(3326.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D719"></use></g><g data-mml-node="TeXAtom" transform="translate(596, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g></g></g></svg></mjx-container>。另外，由于是求基频F0，当然希望偏移越小越好，假设与 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="3.117ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 1377.9 988.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D719"></use></g><g data-mml-node="TeXAtom" transform="translate(596, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g></g></g></svg></mjx-container> 对应的偏移量为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="3.31ex" height="2.211ex" role="img" focusable="false" viewBox="0 -683 1462.9 977.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g></g></g></svg></mjx-container>, 那希望 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="9.075ex" height="2.211ex" role="img" focusable="false" viewBox="0 -683 4011.3 977.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(433, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(1492.6, 0)"><use xlink:href="#MJX-TEX-N-221D"></use></g><g data-mml-node="msub" transform="translate(2548.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g></g></g></svg></mjx-container>。最终我们得到下式：</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 32.43ex"><svg style="vertical-align: -0.616ex; min-width: 32.43ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.363ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -772.1)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 772.1) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="5089 -772.1 1 1044.2"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, 22.1)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(433, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(1492.6, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2548.4, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(3270.6, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(4270.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D719"></use></g><g data-mml-node="TeXAtom" transform="translate(596, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(5648.7, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(6037.7, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(6759.9, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(7760.2, 0)"><use xlink:href="#MJX-TEX-I-1D6FD"></use></g><g data-mml-node="msub" transform="translate(8326.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(9789, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -772.1 1 1044.2"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-8" transform="translate(0, 22.1)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-38" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(889, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FD"></use></g></g></g></svg></mjx-container>是用来惩罚长偏移的系数。另外这里也需要说明 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="3.117ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 1377.9 988.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D719"></use></g><g data-mml-node="TeXAtom" transform="translate(596, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g></g></g></svg></mjx-container> 和式(5)中的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.258ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2324 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D719"></use></g><g data-mml-node="mi" transform="translate(596, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(890, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1168, 0)"><use xlink:href="#MJX-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(2046, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container> 不是一个意思，式(5)中m是偏移量，这里j是候选点的索引， <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="3.31ex" height="2.211ex" role="img" focusable="false" viewBox="0 -683 1462.9 977.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g></g></g></svg></mjx-container> 才是偏移，所以对应到式(5)中的NCCF的话，应该是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="6.581ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 2908.8 1044.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D719"></use></g><g data-mml-node="mi" transform="translate(596, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(890, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="msub" transform="translate(1168, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(2630.8, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container> 。</p><p>对于转移代价 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="4.052ex" height="2.288ex" role="img" focusable="false" viewBox="0 -717 1790.8 1011.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FF"></use></g><g data-mml-node="TeXAtom" transform="translate(444, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1035, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1313, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g></g></g></svg></mjx-container> 的考量则主要是希望F0的变化能够平滑一些，因为帧间的F0变化不应该太大，所以这里要惩罚的是偏移量的变化，一种可行的代价是：</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 28.801ex"><svg style="vertical-align: -2.202ex; min-width: 28.801ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="5.535ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1473.2)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078, 0) translate(-2078, 0)"><g transform="translate(0 1473.2) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="4287 -1473.2 1 2446.4"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FF"></use></g><g data-mml-node="TeXAtom" transform="translate(444, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1035, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1313, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(2068.6, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3124.4, 0)"><use xlink:href="#MJX-TEX-I-1D6FC"></use></g><g data-mml-node="mrow" transform="translate(3764.4, 0)"><g data-mml-node="mo"><svg width="278" height="2446.4" y="-973.2" x="27.5" viewBox="0 -303 278 2446.4"><use xlink:href="#MJX-TEX-S4-2223" transform="scale(1, 3.673)"></use></svg></g><g data-mml-node="mi" transform="translate(333, 0)"><use xlink:href="#MJX-TEX-I-1D459"></use></g><g data-mml-node="mi" transform="translate(631, 0)"><use xlink:href="#MJX-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1116, 0)"><use xlink:href="#MJX-TEX-I-1D454"></use></g><g data-mml-node="mfrac" transform="translate(1593, 0)"><g data-mml-node="msub" transform="translate(710.4, 754.2)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="msub" transform="translate(220, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1623, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1901, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g><rect width="2643.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4476.6, 0)"><svg width="278" height="2446.4" y="-973.2" x="27.5" viewBox="0 -303 278 2446.4"><use xlink:href="#MJX-TEX-S4-2223" transform="scale(1, 3.673)"></use></svg></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1473.2 1 2446.4"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-9"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-39" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(889, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>同样，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FC"></use></g></g></g></svg></mjx-container> 是一个惩罚系数。转移代价的定义在RAPT的论文里要复杂一些，上式只是简化的版本，不过原理都是对偏移变化的惩罚，Kaldi Pitch的论文里定义的是二次方惩罚：</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 33.8ex"><svg style="vertical-align: -2.399ex; min-width: 33.8ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="5.929ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -1560.3)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2578, 0) translate(-2578, 0)"><g transform="translate(0 1560.3) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="4891.8 -1560.3 1 2620.7"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, -87.2)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FF"></use></g><g data-mml-node="TeXAtom" transform="translate(444, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1035, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1313, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(2068.6, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3124.4, 0)"><use xlink:href="#MJX-TEX-I-1D6FC"></use></g><g data-mml-node="msup" transform="translate(3764.4, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-S3-28"></use></g><g data-mml-node="mi" transform="translate(736, 0)"><use xlink:href="#MJX-TEX-I-1D459"></use></g><g data-mml-node="mi" transform="translate(1034, 0)"><use xlink:href="#MJX-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1519, 0)"><use xlink:href="#MJX-TEX-I-1D454"></use></g><g data-mml-node="mfrac" transform="translate(1996, 0)"><g data-mml-node="msub" transform="translate(710.4, 754.2)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="msub" transform="translate(220, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1623, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1901, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g><rect width="2643.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4879.6, 0)"><use xlink:href="#MJX-TEX-S3-29"></use></g></g></g><g data-mml-node="mn" transform="translate(5615.6, 1176.6) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1778 -1560.3 1 2620.7"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-10" transform="translate(0, -87.2)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-31" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-30" transform="translate(889, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(1389, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p>而代码实现中又是这样写的：</p><p><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 41.167ex"><svg style="vertical-align: -1.067ex; min-width: 41.167ex" xmlns="http://www.w3.org/2000/svg" width="100%" height="3.266ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0) scale(0.0181) translate(0, -971.7)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2578, 0) translate(-2578, 0)"><g transform="translate(0 971.7) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="6519.9 -971.7 1 1443.4"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0, -122.2)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D6FF"></use></g><g data-mml-node="TeXAtom" transform="translate(444, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(1035, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1313, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(2068.6, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3124.4, 0)"><use xlink:href="#MJX-TEX-I-1D6FC"></use></g><g data-mml-node="msup" transform="translate(3764.4, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-SO-28"></use></g><g data-mml-node="mi" transform="translate(458, 0)"><use xlink:href="#MJX-TEX-I-1D459"></use></g><g data-mml-node="mi" transform="translate(756, 0)"><use xlink:href="#MJX-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1241, 0)"><use xlink:href="#MJX-TEX-I-1D454"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1718, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(389, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1111.2, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(2111.4, 0)"><use xlink:href="#MJX-TEX-N-394"></use></g><g data-mml-node="msup" transform="translate(2944.4, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="TeXAtom" transform="translate(389, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-1D457"></use></g></g></g><g data-mml-node="mo" transform="translate(1462.9, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(2240.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D43F"></use></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1623, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1901, 0)"><use xlink:href="#MJX-TEX-I-1D458"></use></g></g></g></g></g></g><g data-mml-node="mo" transform="translate(8413.9, 0)"><use xlink:href="#MJX-TEX-SO-29"></use></g></g></g><g data-mml-node="mn" transform="translate(8871.9, 623) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1778 -971.7 1 1443.4"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn-11" transform="translate(0, -122.2)"><g data-mml-node="mtext"><use xlink:href="#MJX-TEX-N-28"></use><use xlink:href="#MJX-TEX-N-31" transform="translate(389, 0)"></use><use xlink:href="#MJX-TEX-N-31" transform="translate(889, 0)"></use><use xlink:href="#MJX-TEX-N-29" transform="translate(1389, 0)"></use></g></g></g></svg></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 833 716" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-394"></use></g></g></g></svg></mjx-container> 也是常数， 由此可见惩罚的形式不太重要。</p><h3 id="Kaldi-Pitch"><a href="#Kaldi-Pitch" class="headerlink" title="Kaldi Pitch"></a>Kaldi Pitch</h3><p>Kaldi Pitch算法由RAPT修改而来，论里讲到与RAPT最大的不同是没有对每一帧是否是话音做硬性判断，而是对每一帧都计算Pitch使得Pitch是个连续的值。另外，Kaldi Pitch给出了每一帧是否是话音的概率以及对原始Pitch特征的一些处理，使其更加符合语音识别的任务。具体有哪些不同，我们按照上述RAPT的步骤，一步一步对着Kaldi 的源码来看就一目了然了。</p><h4 id="Source-Code-of-Kaldi-Pitch"><a href="#Source-Code-of-Kaldi-Pitch" class="headerlink" title="Source Code of Kaldi Pitch"></a>Source Code of Kaldi Pitch</h4><h4 id="Some-issues-about-online-pitch"><a href="#Some-issues-about-online-pitch" class="headerlink" title="Some issues about online pitch"></a>Some issues about online pitch</h4><svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-TEX-N-22C6" d="M210 282Q210 284 225 381T241 480Q241 484 245 484Q249 486 251 486Q258 486 260 477T272 406Q275 390 276 380Q290 286 290 282L388 299Q484 314 487 314H488Q497 314 497 302Q497 297 434 266Q416 257 404 251L315 206L361 118Q372 98 383 75T401 40L407 28Q407 16 395 16Q394 16 392 16L390 17L250 159L110 17L108 16Q106 16 105 16Q93 16 93 28L99 40Q105 52 116 75T139 118L185 206L96 251Q6 296 4 300Q3 301 3 302Q3 314 12 314H13Q16 314 112 299L210 282Z"></path><path id="MJX-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path><path id="MJX-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-TEX-I-1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path><path id="MJX-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-TEX-LO-222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"></path><path id="MJX-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-TEX-N-221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path><path id="MJX-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-TEX-I-1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path id="MJX-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-TEX-I-1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path><path id="MJX-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-TEX-N-3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-TEX-I-1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path><path id="MJX-TEX-SO-2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path><path id="MJX-TEX-SO-221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"></path><path id="MJX-TEX-I-1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path><path id="MJX-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-TEX-I-1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path><path id="MJX-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-TEX-I-1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path><path id="MJX-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-TEX-N-2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path><path id="MJX-TEX-I-1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path><path id="MJX-TEX-N-7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path><path id="MJX-TEX-I-1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path><path id="MJX-TEX-N-7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path><path id="MJX-TEX-N-37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path id="MJX-TEX-N-3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path><path id="MJX-TEX-N-221D" d="M56 124T56 216T107 375T238 442Q260 442 280 438T319 425T352 407T382 385T406 361T427 336T442 315T455 297T462 285L469 297Q555 442 679 442Q687 442 722 437V398H718Q710 400 694 400Q657 400 623 383T567 343T527 294T503 253T495 235Q495 231 520 192T554 143Q625 44 696 44Q717 44 719 46H722V-5Q695 -11 678 -11Q552 -11 457 141Q455 145 454 146L447 134Q362 -11 235 -11Q157 -11 107 56ZM93 213Q93 143 126 87T220 31Q258 31 292 48T349 88T389 137T413 178T421 196Q421 200 396 239T362 288Q322 345 288 366T213 387Q163 387 128 337T93 213Z"></path><path id="MJX-TEX-I-1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-TEX-I-1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path><path id="MJX-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path id="MJX-TEX-I-1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path><path id="MJX-TEX-S4-2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path id="MJX-TEX-S3-28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path><path id="MJX-TEX-S3-29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path><path id="MJX-TEX-SO-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"></path><path id="MJX-TEX-N-394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path><path id="MJX-TEX-SO-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"></path></defs></svg>]]></content>
      
      
      <categories>
          
          <category> Speech Recognition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR </tag>
            
            <tag> ASR Frontend </tag>
            
            <tag> ASR Feature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Utterance Detection in Amazon</title>
      <link href="/2020/04/22/ASR/utterance-detection-in-amazon/"/>
      <url>/2020/04/22/ASR/utterance-detection-in-amazon/</url>
      
        <content type="html"><![CDATA[<p>最近粗略的接触了些话音检测和噪声过滤的工作，有参考到Amazon的相关论文，在此分享下论文的主要方法和贡献。本次分享的两篇论文方法套路基本一样，只是分别使用于不同的场景，一篇是用在端点检测（END-OF-UTTERANCE DETECTION）上，用来判断用户是否已经结束语音指令。另一篇是应用在Device-directed Utterance Detection上，应该主要是用在echo音箱等vpa上，用来过滤一些误触发，用户正对着设备下发的指令认为是正例，而背景噪音，细碎的嬉笑打闹聊天的声音认为是负例，不应该触发， 所以叫Device-directed Utterance Detection。</p><a id="more"></a><h2 id="Device-directed-Utterance-Detection"><a href="#Device-directed-Utterance-Detection" class="headerlink" title="Device-directed Utterance Detection"></a>Device-directed Utterance Detection</h2><h3 id="方法及贡献"><a href="#方法及贡献" class="headerlink" title="方法及贡献"></a>方法及贡献</h3><p>模型可简单概括为三种特征+一个分类器，作者用两个LSTM分别对声学和识别结果分别做embedding，再加上decoder输出的一些特征，最后将三个特征结合起来作为最后分类器的输入。系统结构如下右图所示。这种做法还是比较直观的，三部分特征刚好对应语音识别系统三大部件的输出，对 1-best hypotheses的处理基本可以理解为对语言模型的embedding。最后是一个二分类器，判断本次query是否是Device-directed话音。下左图是正负例的一些样例。</p><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-2.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-1.png" alt=""></td></tr></tbody></table><h3 id="模型与参数"><a href="#模型与参数" class="headerlink" title="模型与参数"></a>模型与参数</h3><h4 id="Acoustic-Embedding"><a href="#Acoustic-Embedding" class="headerlink" title="Acoustic Embedding"></a>Acoustic Embedding</h4><p>Acoustic Embedding 用LSTM做帧级别的device-directed target的预测，输入是每一帧log filter-bank energies (LFBEs)，以25ms帧长和10ms帧移分帧，每一帧的label都和整条query的label一样，最后使用cross-entropy Loss，SGD训练。做softmax之前的两维向量拿出来，作为Acoustic Embedding。</p><h4 id="ASR-feature"><a href="#ASR-feature" class="headerlink" title="ASR feature"></a>ASR feature</h4><p>ASR的输出特征论文里讲的有18维，但未全部给出，只介绍里其中的三维，其一是帧前向概率的平均值，先计算每一帧的前向概率的熵，所有帧的均值即为所得，熵越大说明前向的概率分布差不多，1-best的confidence就越低。 其二是1-best的viterbi cost。 其三是计算lattice节点出边的平均值。</p><h4 id="Character-Embedding"><a href="#Character-Embedding" class="headerlink" title="Character Embedding"></a>Character Embedding</h4><p>Character Embedding和Acoustic Embedding的思路基本一样，也是使用LSTM。只不过输入是1-best输出character级别的embedding，每个character的embedding <a href="https://github.com/stanfordnlp/GloVe" target="_blank" rel="noopener">GloVE</a>来训练。也是取最后一个character的输出作为这部分的Embedding（2维）。</p><h4 id="Classification-Layer"><a href="#Classification-Layer" class="headerlink" title="Classification Layer"></a>Classification Layer</h4><p>最后一个分类层使用的就是简单的两层前馈神经网络，在另一篇论文里有讲，隐藏层节点为100。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>论文的实验数据是在他们自己产品的数据集，并未公开，下面是一些实验结果。</p><ul><li>参数选择<br>作者对LSTM的层数和节点数以及character embedding的维数做了对比实验，实验结果如下图。</li></ul><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-3.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-4.png" alt=""></td></tr></tbody></table><ul><li>性能比较<br>作者还对比了三种单独特征及融合特征对分类的影响，实验显示单单ASR decoder 特征效果最好，多特征的话效果更加。模型用Detection error tradeoff (DET)评价，跟ROC曲线差不多的意思，只是横纵轴定义不一样。</li></ul><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-5.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-spd-6.png" alt=""></td></tr></tbody></table><p>我们参考了此篇论文的思路，目前只使用了ASR Decoder的特征，不过由于decoder实现不一样，采用的特征和维度都不一样，效果也还行，这是可以解释的，ASR Decoder输出的特征是声学模型和语言模型这两个大模型生成的，区分度应该不错。</p><h2 id="End-of-Utterance-detection"><a href="#End-of-Utterance-detection" class="headerlink" title="End-of-Utterance detection"></a>End-of-Utterance detection</h2><p>End-of-Utterance检测也叫enpoint检测，主要是判断用户是否说完话了，对端到端的速度和用户体验至关重要，既不能提前（会打断用户说话），也不能延后（端到端速度慢，体验差）。简单说endpoint检测的目标就是保持准确率高的前提下尽可能快的检测到用户说完话的意图，这当然需要trade-off，一个灵敏的检测器有可能会截断用户的query导致准确率下降。 <a href="https://github.com/kaldi-asr/kaldi" target="_blank" rel="noopener">Kaldi</a>里面的通常做法是计算解码时lattice里面的末尾silence帧的数量，达到一定长度并且满足对应的cost阈值就认为是endpoint，这种方法纯从解码器的角度出发，利用声学模型的输出，没有对声学特征做另外的建模。工业实践上为了效果和计算资源，一般还会在语音识别前面加一个voice-activity-detection (VAD)检测，本文也是这个思路。 这篇论文发表的时间要早于上面那篇，而且要解决的问题也比上篇要复杂。</p><h3 id="方法及贡献-1"><a href="#方法及贡献-1" class="headerlink" title="方法及贡献"></a>方法及贡献</h3><p>本文模型结构基本和上文是一样的（上文借鉴本文）， 特征也是三个部分组成Acoustic Eembedding和 1-best hypotheses Eembedding和ASR输出的feature，最后加个二分类器，不过上文主要论证比较ASR feature的有效性，此本则偏重与Acoustic部分。另外，这篇论文是在远场环境上做的，一般来说远场环境的困难要大得多。</p><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-2.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-1.png" alt=""></td></tr></tbody></table><p>不同的地方主要有以下几点：</p><ul><li>Acoustic 部分做的是多任务学习，将声学feature同时用于训练VAD和endpoint检测，而且与上文不同，label是帧级别的，所以训练时需要对齐特征和label，如上右图所示。取VAD部分取输出给Inference时计算阈值，endpoint部分则取pre-softmax的特征作为最后二分类器的输入。</li><li>1-best hypotheses embedding部分使用的是word embedding，由于输出和帧无法一一对应，如果ASR输出的partial没有变化，则会一直延用最新的word embedding。</li><li>ASR feature 方面只介绍了个pause duration，这个应该跟kaidi检测endpoint类似，计算lattice（或其他类似解码网格）的末尾静音帧数。</li></ul><h3 id="Inference-Pipeline"><a href="#Inference-Pipeline" class="headerlink" title="Inference Pipeline"></a>Inference Pipeline</h3><p>上面介绍Acoustic部分分为两部分vad + endpoint，在inference是先用vad的输出判断静音的持续时间，通过阈值Tmin，Tmax来判断是否启用endpoint检测（二分类器的输出）。在下面两种情况下认为检测到endpoint，当vad给出的静音阈值大于Tmin并且最终二分类器输出为endpoint，或者vad给出的静音阈值超过Tmax。 endpoint检测是一个比较困难的题目，实际工业应用基本不可能单模型就解决得很好，一般都使用多模型融合。</p><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><ul><li>特征性能比较<br>实验部分照例比较了三种特征的性能和融合后的性能，Acoustic 单特征最后，融合能带来性能的提升。</li></ul><table><thead><tr><th><!-- --></th><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-3.png" alt=""></td><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-4.png" alt=""></td></tr></tbody></table><ul><li>混合语言的效果<br>作者还进行了混合语言的效果，说明本模型跟语言并不太相关，即模型架构不需要改变，换批训练数据，在其他语言上也能达到相同的效果。这当然是最理想的结果，相关实验结果如下。</li></ul><table><thead><tr><th><!-- --></th></tr></thead><tbody><tr><td><img src="http://img.kingway.fun/IMGMatrix/blog/2020/04/amazon-epd-5.png" alt=""></td></tr></tbody></table><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>[1] <a href="https://docs.qq.com/pdf/DRUtsWlVCZ2lFZERU" target="_blank" rel="noopener">Device-directed Utterance Detection</a></li><li>[2] <a href="https://docs.qq.com/pdf/DRXFyTFdHT05YcXBw" target="_blank" rel="noopener">COMBINING ACOUSTIC EMBEDDINGSAND DECODING FEATURES FOR END-OF-UTTERANCE DETECTION IN REAL-TIME FAR-FIELD SPEECH RECOGNITION SYSTEMS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Speech Recognition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR </tag>
            
            <tag> 论文 </tag>
            
            <tag> amazon </tag>
            
            <tag> Utterance Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习人类语言处理 公开课</title>
      <link href="/2020/03/28/ASR/lihongyi_nlp/"/>
      <url>/2020/03/28/ASR/lihongyi_nlp/</url>
      
        <content type="html"><![CDATA[<p>李宏毅《深度学习人类语言处理》公开课<br>课程地址：<a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_DLHLP20.html" target="_blank" rel="noopener">http://speech.ee.ntu.edu.tw/~tlkagk/courses_DLHLP20.html</a>  </p><a id="more"></a><h3 id="P1-Course-Overview"><a href="#P1-Course-Overview" class="headerlink" title="P1 : Course Overview"></a>P1 : Course Overview</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=161006931&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P2-Speech-Recognition-Part-1"><a href="#P2-Speech-Recognition-Part-1" class="headerlink" title="P2 : Speech Recognition (Part 1)"></a>P2 : Speech Recognition (Part 1)</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=161006956&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P3-Listen-Attend-Spell-part-2"><a href="#P3-Listen-Attend-Spell-part-2" class="headerlink" title="P3 : Listen, Attend, Spell (part 2)"></a>P3 : Listen, Attend, Spell (part 2)</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=163087865&page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P4-CTC-RNN-T-and-more-part-3"><a href="#P4-CTC-RNN-T-and-more-part-3" class="headerlink" title="P4 : CTC, RNN-T and more (part 3)"></a>P4 : CTC, RNN-T and more (part 3)</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=163087693&page=4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P5-HMM"><a href="#P5-HMM" class="headerlink" title="P5 : HMM"></a>P5 : HMM</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=166218711&page=5" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P6-Alignment-of-HMM-CTC-and-RNN-T"><a href="#P6-Alignment-of-HMM-CTC-and-RNN-T" class="headerlink" title="P6 : Alignment of HMM, CTC and RNN-T"></a>P6 : Alignment of HMM, CTC and RNN-T</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=166222248&page=6" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P7-RNN-T-Training"><a href="#P7-RNN-T-Training" class="headerlink" title="P7 : RNN-T Training"></a>P7 : RNN-T Training</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=167357962&page=7" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P8-Language-Modeling"><a href="#P8-Language-Modeling" class="headerlink" title="P8 : Language Modeling"></a>P8 : Language Modeling</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=169402582&page=8" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="P9-Voice-Conversion"><a href="#P9-Voice-Conversion" class="headerlink" title="P9 : Voice Conversion"></a>P9 : Voice Conversion</h3><iframe style="width: 100%; height: 500px" src="//player.bilibili.com/player.html?aid=94310884&bvid=BV1QE411p7z3&cid=169681445&page=9" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> Speech Recognition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR </tag>
            
            <tag> 公开课 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Towords End-to-End Speech Recognition</title>
      <link href="/2020/02/26/ASR/towords_e2e_asr/"/>
      <url>/2020/02/26/ASR/towords_e2e_asr/</url>
      
        <content type="html"><![CDATA[<p>Google’s End-to-End Speech Recognition Tutorial at ISCSLP 2018 </p><a id="more"></a><p><embed style="width: 100%; height: 800px" src="https://docs.qq.com/pdf/DRWdnd1VvQnlmQ0RE" frameborder=0 allowfullscreen></embed></p>]]></content>
      
      
      <categories>
          
          <category> Speech Recognition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR </tag>
            
            <tag> 论文 </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++仿函数</title>
      <link href="/2019/08/17/cpp/C-functor/"/>
      <url>/2019/08/17/cpp/C-functor/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>functor的英文解释为something that performs a function，即其行为类似函数的东西。C++中的仿函数是通过在类中重载()运算符实现，使你可以像使用函数一样来创建类的对象。  </p><a id="more"></a><h4 id="C中是怎么实现这个功能的"><a href="#C中是怎么实现这个功能的" class="headerlink" title="C中是怎么实现这个功能的"></a>C中是怎么实现这个功能的</h4><p>使用指针函数和回调函数，比如qsort的比较函数</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">sort_function</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> list<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sort_function<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//起始地址，个数，元素大小，回调函数 </span>   <span class="token keyword">int</span>  x<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i\n"</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-中的仿函数"><a href="#C-中的仿函数" class="headerlink" title="C++ 中的仿函数"></a>C++ 中的仿函数</h4><ul><li>一个例子(增加任意常数)<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// this is a functor</span><span class="token keyword">struct</span> add_x <span class="token punctuation">{</span><span class="token function">add_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// usage:</span>add_x <span class="token function">add42</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// create an instance of the functor class</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">add42</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// and "call" it</span><span class="token function">assert</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// and it added 42 to its argument</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Pass a functor to std::transform, which calls the functor on every element </span><span class="token comment" spellcheck="true">// in the input sequence, and stores the result to the output sequence</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">transform</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add_x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">assert</span><span class="token punctuation">(</span>out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>迭代和计算逻辑分开（for_each 求和例子）<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sum <span class="token punctuation">{</span>  <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">total</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token operator">*</span> total<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token operator">*</span>total <span class="token operator">+</span><span class="token operator">=</span> element<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  sum <span class="token function">s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints total = 15;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>for_each 为STL的非变易算法，是一组不破坏操作数据的模板函数，对[first,last)数据逐个处理，执行由单参数函数对象所定义的操作。</p></blockquote></li><li>仿函数可以是有状态的，可以应用到多个集合中。<br>一个例子（对多个数据集取平均）<pre class="line-numbers language-c"><code class="language-c">class CalculateAverage <span class="token punctuation">{</span>public<span class="token punctuation">:</span>  <span class="token function">CalculateAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">acc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> acc <span class="token operator">+</span><span class="token operator">=</span> x<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">float</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> acc <span class="token operator">/</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span>  <span class="token keyword">float</span> acc<span class="token punctuation">;</span>  <span class="token keyword">int</span>   n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CalculateAverage avg<span class="token punctuation">;</span>avg <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">for_each</span><span class="token punctuation">(</span>dataA<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataA<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>avg <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">for_each</span><span class="token punctuation">(</span>dataB<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataB<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>avg <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">for_each</span><span class="token punctuation">(</span>dataC<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataC<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> avg<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>仿函数的性能<br>使用仿函数编译器可以准确知道需要调用哪个函数。这意味着它可以内联这个函数调用。而如果使用函数指针，编译器不能直接确定指针指向的函数，而这必须在程序运行时才能得到并调用。一个例子就是比较std::sort 和qsort ，STL的版本一般要快5-10倍。</li><li>STL 内建仿函数<pre class="line-numbers language-c"><code class="language-c">plus<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token comment" spellcheck="true">// plus example</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>     </span><span class="token comment" spellcheck="true">// std::cout</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>   </span><span class="token comment" spellcheck="true">// std::plus</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>    </span><span class="token comment" spellcheck="true">// std::transform</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> first<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> second<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> results<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">transform</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> first<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> second<span class="token punctuation">,</span> results<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>plus<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出</span><span class="token comment" spellcheck="true">// 11 22 33 44 55</span>minus<span class="token operator">&lt;</span>T<span class="token operator">></span>multiplies<span class="token operator">&lt;</span>T<span class="token operator">></span>divides<span class="token operator">&lt;</span>T<span class="token operator">></span>modulus<span class="token operator">&lt;</span>T<span class="token operator">></span>negate<span class="token operator">&lt;</span>T<span class="token operator">></span>equal_to<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token comment" spellcheck="true">// equal_to example</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>     </span><span class="token comment" spellcheck="true">// std::cout</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utility></span>      </span><span class="token comment" spellcheck="true">// std::pair</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>   </span><span class="token comment" spellcheck="true">// std::equal_to</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>    </span><span class="token comment" spellcheck="true">// std::mismatch</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">></span> ptiter<span class="token punctuation">;</span><span class="token keyword">int</span> foo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> bar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ptiter <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">mismatch</span> <span class="token punctuation">(</span>foo<span class="token punctuation">,</span> foo<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> bar<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>equal_to<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"First mismatching pair is: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptiter<span class="token punctuation">.</span>first<span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" and "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptiter<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出</span><span class="token comment" spellcheck="true">// First mismatching pair is: 30 and 40</span>not_equal_to<span class="token operator">&lt;</span>T<span class="token operator">></span>greater<span class="token operator">&lt;</span>T<span class="token operator">></span>greater_equal<span class="token operator">&lt;</span>T<span class="token operator">></span>less<span class="token operator">&lt;</span>T<span class="token operator">></span>less_equal<span class="token operator">&lt;</span>T<span class="token operator">></span>logical_and<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token comment" spellcheck="true">// logical_and example</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>     </span><span class="token comment" spellcheck="true">// std::cout, std::boolalpha</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>   </span><span class="token comment" spellcheck="true">// std::logical_and</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>    </span><span class="token comment" spellcheck="true">// std::transform</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>bool foo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>true<span class="token punctuation">,</span>false<span class="token punctuation">,</span>true<span class="token punctuation">,</span>false<span class="token punctuation">}</span><span class="token punctuation">;</span>bool bar<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>true<span class="token punctuation">,</span>true<span class="token punctuation">,</span>false<span class="token punctuation">,</span>false<span class="token punctuation">}</span><span class="token punctuation">;</span>bool result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">transform</span> <span class="token punctuation">(</span>foo<span class="token punctuation">,</span> foo<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> bar<span class="token punctuation">,</span> result<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>logical_and<span class="token operator">&lt;</span>bool<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token string">"Logical AND:\n"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> foo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" AND "</span> <span class="token operator">&lt;&lt;</span> bar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出</span><span class="token comment" spellcheck="true">// Logical AND:</span><span class="token comment" spellcheck="true">// true AND true = true</span><span class="token comment" spellcheck="true">// false AND true = false</span><span class="token comment" spellcheck="true">// true AND false = false</span><span class="token comment" spellcheck="true">// false AND false = false</span>logical_or<span class="token operator">&lt;</span>T<span class="token operator">></span>logical_no<span class="token operator">&lt;</span>T<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++使用LD_PRELOAD劫持（Hook）库函数</title>
      <link href="/2019/06/13/cpp/C-hook/"/>
      <url>/2019/06/13/cpp/C-hook/</url>
      
        <content type="html"><![CDATA[<p>在调试C++程序的时候，我们并不是每次都能拿到源代码，很多时候我们只能得到一个动态库so，调试时这个动态库就是一个黑匣子，没办法查看修改或者在里面加日志，那么我们是不是就没有任何办法对我们感兴趣的函数和参数进行监控和跟踪了呢？  </p><a id="more"></a><p>对于这种情况，我们一般会挂上<code>gdb</code>,然后在我们感兴趣的地方打上断点，然后查看堆栈里的变量的值。但这个过程时比较繁琐的，尤其是在需要了解程序执行的大量中间过程时是非常让人抓狂的。下面我们将介绍一种使用钩子函数的方法，来修改目标函数的运行时的行为，来达到我们跟踪函数运行的目的。  </p><p>钩子函数可以在运行时劫持预先存在的函数，我们可以在钩子函数里对预先的函数做一些包装，使得函数保持原来的功能的前提下做一些额外的操作。在本文中我们主要的是linux系统的动态加载API，动态加载允许在运行时加载并运行动态链接库里的函数，所以我们可以把钩子函数打包成动态链接库，以实现对现有函数的劫持。实现这个功能需要用到LD_PRELOAD环境变量，使用LD_PRELOAD加载的动态库会最先被加载，这就使得我们有机会可以在钩子函数里运用动态加载技术将原先的函数绑定到钩子函数中，从而达到监控及跟踪的效果。</p><p>下面就以最简单的hello world的例子来讲解这一切是怎么做到的。<br>首先main函数，helloworld.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello world!n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再是钩子函数，example.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h></span></span><span class="token keyword">int</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>new_puts<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span>  new_puts <span class="token operator">=</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>RTLD_NEXT<span class="token punctuation">,</span> <span class="token string">"puts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"Hello world!n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token function">new_puts</span><span class="token punctuation">(</span><span class="token string">"Goodbye, cruel world!n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token function">new_puts</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个样例里，我们劫持了标准库里的<code>puts</code>函数。简单看一下代码。<br>第四行我们定义了一个和标准库里有一模一样签名的<code>puts</code>函数，这是能劫持<code>puts</code>函数的关键，钩子函数的签名一定要和原函数一模一样。<br>第五行我们又声明了一个和原函数参数一样的函数指针，这个指针用来后面指向原函数。<br>第九行利用<code>dlsym</code>函数获取原函数的指针并赋给上面声明的指针，<code>RTLD_NEXT</code>这个枚举变量告诉动态加载器加载第二个参数（在本例中为<code>puts</code>）相关联的函数的下一个实例也就是原函数里的<code>puts</code>。<br>后面的<code>if</code>判断里我们比较传进来的参数，然后输出不同的结果，从而在运行时改变程序的行为。</p><p>编译运行看一下</p><pre class="line-numbers language-bash"><code class="language-bash">kingway@ubuntu:~/code$ gcc helloworld.c -o helloworldkingway@ubuntu:~/code$ gcc example.c -o libexample.so -fPIC -shared -ldl -D_GNU_SOURCE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>helloworld.c正常编译成可执行文件就行，example.c我们需要编译成位置无关的动态链接库，<code>-ldl -D_GNU_SOURCE</code>是必须的，这样我们才能使用动态加载API，并且访问<code>RTLD_NEXT</code>枚举变量。</p><p>看一下运行的结果</p><pre class="line-numbers language-bash"><code class="language-bash">kingway@ubuntu:~/code$ <span class="token function">export</span> LD_PRELOAD<span class="token operator">=</span><span class="token string">"/home/kingway/code/libexample.so"</span>kingway@ubuntu:~/code$ ./helloworldGoodbye, cruel world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到Hello world成功被劫持，并输出了钩子函数里的结果。这只是一个简单的例子，但通过这种方法，我们可以轻松的劫持黑匣子动态链接库的函数，并在必要时进行一些修改，达到调试的目的。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11智能指针</title>
      <link href="/2019/06/03/cpp/CPP-smart-pointer/"/>
      <url>/2019/06/03/cpp/CPP-smart-pointer/</url>
      
        <content type="html"><![CDATA[<p>很多人怕写C/C++ 程序就是因为指针，因为指针给了程序员高度的自由，同样也赋予了高度的责任，稍有不慎就导致内存泄漏。其实写C++ 可以完全不用指针，尤其C++ 11对智能指针作了进一步的升级，在不需要使用任何裸指针的前提下也可以写出高效的C++ 程序。C++ 11中定义了<code>unique_ptr</code>、<code>shared_ptr</code>与<code>weak_ptr</code>三种智能指针(smart pointer)，都包含在<code>&lt;memory&gt;</code>头文件中。智能指针可以对动态分配的资源进行管理，保证任何情况下，已构造的对象最终会销毁，即它的析构函数最终会被调用。</p><a id="more"></a><h4 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h4><p>如名字所示，<code>unique_ptr</code>是个独占指针，C++ 11之前就已经存在，<code>unique_ptr</code>所指的内存为自己独有，某个时刻只能有一个<code>unique_ptr</code>指向一个给定的对象，不支持拷贝和赋值。下面以代码样例来说明<code>unique_ptr</code>的用法，各种情况都在代码注释给出。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up1</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 无法复制的unique_ptr</span>    <span class="token comment" spellcheck="true">// unique_ptr&lt;int> up2 = up1;        // err, 不能通过编译</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up1 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 11</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> up3 <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>up1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 现在p3是数据的唯一的unique_ptr</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up3 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 11</span>    <span class="token comment" spellcheck="true">// std::cout &lt;&lt; *up1 &lt;&lt; std::endl;   // err, 运行时错误，空指针</span>    up3<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 显式释放内存</span>    up1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 不会导致运行时错误</span>    <span class="token comment" spellcheck="true">// std::cout &lt;&lt; *up3 &lt;&lt; std::endl;   // err, 运行时错误，空指针</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up4</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 无法复制的unique_ptr</span>    up4<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "绑定"动态对象</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>up4 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 44</span>    up4 <span class="token operator">=</span> nullptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显式销毁所指对象，同时智能指针变为空指针。与up4.reset()等价</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">up5</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> up5<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只是释放控制权，不会释放内存</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// cout &lt;&lt; *up5 &lt;&lt; endl; // err, 运行时错误，不再拥有内存</span>    delete p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放堆区资源</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><p><code>shared_ptr</code>允许多个该智能指针共享“拥有”同一堆分配对象的内存，这通过引用计数（reference counting）实现，会记录有多少个shared_ptr共同指向一个对象，一旦最后一个这样的指针被销毁，也就是一旦某个对象的引用计数变为0，这个对象会被自动删除。支持复制和赋值操作。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp1</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sp2 <span class="token operator">=</span> sp1<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cout: "</span> <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印引用计数, 2</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    sp1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示让引用计数减一</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"count: "</span> <span class="token operator">&lt;&lt;</span> sp2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印引用计数, 1</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 22</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了上面出现的<code>use_count</code>和<code>reset</code>之外，还有<code>unique</code>返回是否是独占所有权(use_count 为 1)，<code>swap</code>交换两个shared_ptr对象(即交换所拥有的对象)，<code>get</code>返回内部对象(指针)几个成员函数。</p><ul><li>make_shared 函数<br>最安全的分配和使用动态内存的方法是调用一个名为<code>make_shared</code>的标准库函数。此函数在动态内存中分配一个对象并初始化它，返回指向此对象的<code>shared_ptr</code>。当要用<code>make_shared</code>时，必须指定想要创建的对象的类型或者使用更为简洁的<code>auto</code>，如下：<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 指向一个值为42的int的shared_ptr</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p3 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p4指向一个值为"9999999999"的string</span>shared_ptr<span class="token operator">&lt;</span>string<span class="token operator">></span> p4 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p5指向一个值初始化的int,值为0</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p5 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p6指向一个动态分配的空vector&lt;string></span><span class="token keyword">auto</span> p6 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>当进行拷贝或赋值操作时，每个<code>shared_ptr</code>都会记录有多少个其他<code>shared_ptr</code>指向相同的对象：<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">auto</span> p <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//p指向的对象只有p一个引用者</span><span class="token keyword">auto</span> <span class="token function">q</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//p和q指向相同对象，此对象有两个引用者    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h4><p><code>weak_ptr</code>是为配合<code>shared_ptr</code>而引入的一种智能指针来协助<code>shared_ptr</code>工作，它可以从一个shared_ptr或另一个weak_ptr对象构造，它的构造和析构不会引起引用计数的增加或减少。没有重载 <code>*</code>和 <code>-&gt;</code> 但可以使用lock获得一个可用的<code>shared_ptr</code>对象</p><p><code>weak_ptr</code>的使用更为复杂一点，它可以指向<code>shared_ptr</code>指针指向的对象内存，却并不拥有该内存，而使用<code>weak_ptr</code>成员<code>lock</code>，则可返回其指向内存的一个<code>share_ptr</code>对象，且在所指对象内存已经无效时，返回指针空值nullptr。</p><p><strong>注意：weak_ptr并不拥有资源的所有权，所以不能直接使用资源。</strong> 可以从一个<code>weak_ptr</code>构造一个<code>shared_ptr</code>以取得共享资源的所有权。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>weak_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>wp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sp <span class="token operator">=</span> wp<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 转换为shared_ptr&lt;int></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sp <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"still: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"still: "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"pointer is invalid"</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sp1</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sp2 <span class="token operator">=</span> sp1<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>weak_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> wp <span class="token operator">=</span> sp1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 指向shared_ptr&lt;int>所指对象</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"count: "</span> <span class="token operator">&lt;&lt;</span> wp<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// count: 2</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp1 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    <span class="token function">check</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// still: 22</span>    sp1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"count: "</span> <span class="token operator">&lt;&lt;</span> wp<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// count: 1</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sp2 <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span>    <span class="token function">check</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// still: 22</span>    sp2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"count: "</span> <span class="token operator">&lt;&lt;</span> wp<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// count: 0</span>    <span class="token function">check</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// still: pointer is invalid</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>为什么要使用weak_ptr  </p></li><li><p><em>weak_ptr解决shared_ptr循环引用的问题*</em><br>定义两个类，每个类中又包含一个指向对方类型的智能指针作为成员变量，然后创建对象，设置完成后查看引用计数后退出，看一下测试结果：</p><pre class="line-numbers language-c"><code class="language-c">class CB<span class="token punctuation">;</span>class CA<span class="token punctuation">{</span>public<span class="token punctuation">:</span>   <span class="token function">CA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CA() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token operator">~</span><span class="token function">CA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~CA() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">set_ptr</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span><span class="token operator">&amp;</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> m_ptr_b <span class="token operator">=</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">b_use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b use count : "</span> <span class="token operator">&lt;&lt;</span> m_ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is class CA!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span>   shared_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span> m_ptr_b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>class CB<span class="token punctuation">{</span>public<span class="token punctuation">:</span>   <span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CB() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token operator">~</span><span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~CB() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">set_ptr</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span><span class="token operator">&amp;</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> m_ptr_a <span class="token operator">=</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">a_use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a use count : "</span> <span class="token operator">&lt;&lt;</span> m_ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is class CB!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span>   shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> m_ptr_a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test_refer_to_each_other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> <span class="token function">ptr_a</span><span class="token punctuation">(</span>new <span class="token function">CA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   shared_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span> <span class="token function">ptr_b</span><span class="token punctuation">(</span>new <span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   ptr_a<span class="token operator">-></span><span class="token function">set_ptr</span><span class="token punctuation">(</span>ptr_b<span class="token punctuation">)</span><span class="token punctuation">;</span>   ptr_b<span class="token operator">-></span><span class="token function">set_ptr</span><span class="token punctuation">(</span>ptr_a<span class="token punctuation">)</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试结果</span><span class="token comment" spellcheck="true">// CA() called!</span><span class="token comment" spellcheck="true">// CB() called!</span><span class="token comment" spellcheck="true">// a use count : 1</span><span class="token comment" spellcheck="true">// b use count : 1</span><span class="token comment" spellcheck="true">// a use count : 2</span><span class="token comment" spellcheck="true">// b use count : 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>通过结果可以看到，最后CA和CB的对象并没有被析构，其中的引用效果如下图所示，起初定义完ptr_a和ptr_b时，只有①③两条引用，然后调用函数set_ptr后又增加了②④两条引用，当test_refer_to_each_other这个函数返回时，对象ptr_a和ptr_b被销毁，也就是①③两条引用会被断开，但是②④两条引用依然存在，每一个的引用计数都不为0，结果就导致其指向的内部对象无法析构，造成内存泄漏。<br><img src="http://img.kingway.fun/IMGMatrix/blog/cpp/c11001.png" alt=""></p><p>解决这种状况的办法就是将两个类中的一个成员变量改为weak_ptr对象，因为weak_ptr不会增加引用计数，使得引用形不成环，最后就可以正常的释放内部的对象，不会造成内存泄漏，比如将CB中的成员变量改为weak_ptr对象，代码如下：</p><pre class="line-numbers language-c"><code class="language-c">class CB<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CB() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~CB() called! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">set_ptr</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span><span class="token operator">&amp;</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> m_ptr_a <span class="token operator">=</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">a_use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a use count : "</span> <span class="token operator">&lt;&lt;</span> m_ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is class CB!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    weak_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> m_ptr_a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试结果</span><span class="token comment" spellcheck="true">// CA() called!</span><span class="token comment" spellcheck="true">// CB() called!</span><span class="token comment" spellcheck="true">// a use count : 1</span><span class="token comment" spellcheck="true">// b use count : 1</span><span class="token comment" spellcheck="true">// a use count : 1</span><span class="token comment" spellcheck="true">// b use count : 2</span><span class="token comment" spellcheck="true">// ~CA() called!</span><span class="token comment" spellcheck="true">// ~CB() called!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这次结果可以看到，CA和CB的对象都被正常的析构了，引用关系如下图所示，流程与上一例子相似，但是不同的是④这条引用是通过weak_ptr建立的，并不会增加引用计数，也就是说CA的对象只有一个引用计数，而CB的对象只有2个引用计数，当test_refer_to_each_other这个函数返回时，对象ptr_a和ptr_b被销毁，也就是①③两条引用会被断开，此时CA对象的引用计数会减为0，对象被销毁，其内部的m_ptr_b成员变量也会被析构，导致CB对象的引用计数会减为0，对象被销毁，进而解决了引用成环的问题。</p><p><img src="http://img.kingway.fun/IMGMatrix/blog/cpp/c11002.png" alt=""></p><ul><li><p><strong>weak_ptr 注意事项</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 编译错误 </span><span class="token comment" spellcheck="true">// error C2665: “std::weak_ptr&lt;CA>::weak_ptr”: 3 个重载中没有一个可以转换所有参数类型</span><span class="token comment" spellcheck="true">// weak_ptr&lt;CA> ptr_1(new CA());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 编译错误</span><span class="token comment" spellcheck="true">// error C2440 : “初始化”: 无法从“std::weak_ptr&lt;CA>”转换为“std::shared_ptr&lt;CA>”</span><span class="token comment" spellcheck="true">// shared_ptr&lt;CA> ptr_3 = wk_ptr;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 编译错误</span><span class="token comment" spellcheck="true">// 编译必须作用于相同的指针类型之间</span><span class="token comment" spellcheck="true">// wk_ptr_a.swap(wk_ptr_b);         // 调用交换函数</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 编译错误</span><span class="token comment" spellcheck="true">// 编译必须作用于相同的指针类型之间</span><span class="token comment" spellcheck="true">// wk_ptr_b = wk_ptr_a;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>weak_ptr中只有函数lock和expired两个函数比较重要，因为它本身不会增加引用计数，所以它指向的对象可能在它用的时候已经被释放了，所以在用之前需要使用expired函数来检测是否过期，然后使用lock函数来获取其对应的shared_ptr对象，然后进行后续操作：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  shared_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> <span class="token function">ptr_a</span><span class="token punctuation">(</span>new <span class="token function">CA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出：CA() called!</span>  shared_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span> <span class="token function">ptr_b</span><span class="token punctuation">(</span>new <span class="token function">CB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出：CB() called!</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ptr_a use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ptr_a use count : 1</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ptr_b use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ptr_b use count : 1</span>  weak_ptr<span class="token operator">&lt;</span>CA<span class="token operator">></span> wk_ptr_a <span class="token operator">=</span> ptr_a<span class="token punctuation">;</span>  weak_ptr<span class="token operator">&lt;</span>CB<span class="token operator">></span> wk_ptr_b <span class="token operator">=</span> ptr_b<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wk_ptr_a<span class="token punctuation">.</span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      wk_ptr_a<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出：this is class CA!</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wk_ptr_b<span class="token punctuation">.</span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      wk_ptr_b<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出：this is class CB!</span>  <span class="token punctuation">}</span>  wk_ptr_b<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 将wk_ptr_b的指向清空</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>wk_ptr_b<span class="token punctuation">.</span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"wk_ptr_b is invalid"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出：wk_ptr_b is invalid 说明改指针已经无效</span>  <span class="token punctuation">}</span>  wk_ptr_b <span class="token operator">=</span> ptr_b<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wk_ptr_b<span class="token punctuation">.</span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      wk_ptr_b<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出：this is class CB! 调用赋值操作后，wk_ptr_b恢复有效</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 最后输出的引用计数还是1，说明之前使用weak_ptr类型赋值，不会影响引用计数</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ptr_a use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ptr_a use count : 1</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ptr_b use count : "</span> <span class="token operator">&lt;&lt;</span> ptr_b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：ptr_b use count : 1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK，三个智能指针，鼓捣明白了吗？</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux上如何查看物理CPU个数,核数,线程数</title>
      <link href="/2019/04/20/linux/Linux-CPU-cores/"/>
      <url>/2019/04/20/linux/Linux-CPU-cores/</url>
      
        <content type="html"><![CDATA[<p>现在的处理器一般都会使用超线程技术来实现并行，超线程技术就是利用特殊的硬件指令，把两个逻辑内核模拟成两个物理芯片，让单个处理器都能使用线程级并行计算，进而兼容多线程操作系统和软件，减少了CPU的闲置时间，提高的CPU的运行效率。</p><a id="more"></a><p>接下来看看物理CPU个数，核数以及线程数的关系</p><p>总核数 = 物理CPU个数 * 每颗物理CPU的核数<br>总逻辑CPU数 = 物理CPU个数 * 每颗物理CPU的核数 * 超线程数</p><p>上述公式中，逻辑CPU数即线程数，即我们常说的4核8线程，32核64线程的线程。</p><ul><li><p>如何查看CPU物理个数</p><pre><code># grep &#39;physical id&#39; /proc/cpuinfo | sort -uphysical id    : 0physical id    : 1</code></pre></li><li><p>如何查看每个物理CPU的核数</p><pre><code># grep &#39;core id&#39; /proc/cpuinfo | sort -u | wc -l8</code></pre></li><li><p>如何查看总的逻辑CPU个数</p><pre><code># grep &#39;processor&#39; /proc/cpuinfo | sort -u | wc -l32</code></pre><p>这个服务器有32个逻辑核，8个物理核，可见该CPU支持并已打开超线程，每个物理核支持两个并行线程。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx反向代理location路径设置</title>
      <link href="/2019/04/19/linux/nginx-location-setting/"/>
      <url>/2019/04/19/linux/nginx-location-setting/</url>
      
        <content type="html"><![CDATA[<p>nginx反向代理路径的配置规则，路径最后有<code>/</code>和没<code>/</code>的区别。</p><a id="more"></a><h4 id="一-location匹配路径末尾没有"><a href="#一-location匹配路径末尾没有" class="headerlink" title="一. location匹配路径末尾没有 /"></a>一. location匹配路径末尾没有 /</h4><p>此时proxy_pass后面的路径必须和location设置的路径一致：</p><pre class="line-numbers language-text"><code class="language-text">location /index{   proxy_redirect off;   proxy_set_header        Host $host;   proxy_set_header        X-Real-IP $remote_addr;   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;   proxy_pass http://localhost:8080/index;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index/index.html" target="_blank" rel="noopener">http://localhost:8080/index/index.html</a></p><h4 id="二-location匹配路径末尾有"><a href="#二-location匹配路径末尾有" class="headerlink" title="二. location匹配路径末尾有 /"></a>二. location匹配路径末尾有 /</h4><p>此时proxy_pass后面的路径需要分为以下四种情况讨论：</p><ul><li>proxy_pass后面的路径只有域名且最后没有 /：<pre><code>location /index/{ proxy_redirect off; proxy_set_header        Host $host; proxy_set_header        X-Real-IP $remote_addr; proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080;}</code></pre></li></ul><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index/index.html" target="_blank" rel="noopener">http://localhost:8080/index/index.html</a></p><ul><li><p>proxy_pass后面的路径只有域名同时最后有 /：</p><pre><code>location /index/{ proxy_redirect off; proxy_set_header        Host $host; proxy_set_header        X-Real-IP $remote_addr; proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080/;}</code></pre><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a></p></li><li><p>proxy_pass后面的路径还有其他路径但是最后没有 /：</p><pre><code>location /index/{ proxy_redirect off; proxy_set_header        Host $host; proxy_set_header        X-Real-IP $remote_addr; proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080/test;}</code></pre></li></ul><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/testindex.html" target="_blank" rel="noopener">http://localhost:8080/testindex.html</a></p><ul><li>proxy_pass后面的路径还有其他路径同时最后有 /：<pre><code>location /index/{ proxy_redirect off; proxy_set_header        Host $host; proxy_set_header        X-Real-IP $remote_addr; proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080/test/;}</code></pre></li></ul><p>外面访问：<a href="http://romotehost/index/index.html" target="_blank" rel="noopener">http://romotehost/index/index.html</a><br>相当于访问：<a href="http://localhost:8080/index/index.html" target="_blank" rel="noopener">http://localhost:8080/index/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非root用户安装ngnix</title>
      <link href="/2019/04/18/linux/install-ngnix-without-root/"/>
      <url>/2019/04/18/linux/install-ngnix-without-root/</url>
      
        <content type="html"><![CDATA[<p>如果在开发机上没有root权限，怎么搭建自己的nginx服务。</p><a id="more"></a><h4 id="非root用户从源码编译安装nginx"><a href="#非root用户从源码编译安装nginx" class="headerlink" title="非root用户从源码编译安装nginx"></a>非root用户从源码编译安装nginx</h4><ul><li>获取依赖库nginx依赖pcre和zlib两个库,openssl库非必须，但一般都加上，https支持需要<pre><code>wget https://sourceforge.net/projects/libpng/files/zlib/1.2.11/zlib-1.2.11.tar.gztar zxvf zlib-1.2.11.tar.gzwget https://sourceforge.net/projects/pcre/files/pcre/8.43/pcre-8.43.tar.gztar zxvf pcre-8.43.tar.gzwget https://www.openssl.org/source/openssl-1.0.2r.tar.gztar zxvf openssl-1.0.2r.tar.gz</code></pre></li></ul><p>pcre源码在<a href="https://sourceforge.net/projects/pcre/files/pcre/" target="_blank" rel="noopener">https://sourceforge.net/projects/pcre/files/pcre/</a>可自行选择版本  </p><p>zlib源码在<a href="https://sourceforge.net/projects/libpng/files/zlib/" target="_blank" rel="noopener">https://sourceforge.net/projects/libpng/files/zlib/</a>,可自行选择版本  </p><p>openssl源码在<a href="https://www.openssl.org/source/" target="_blank" rel="noopener">https://www.openssl.org/source/</a>,可自行选择版本  </p><p>解压后无需安装自己编译的话nginx是通过源码依赖这些库的。</p><ul><li><p>获取nginx源码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://nginx.org/download/nginx-1.14.2.tar.gz<span class="token function">tar</span> zxvf nginx-1.14.2.tar.gz<span class="token function">cd</span> nginx-1.14.2<span class="token comment" spellcheck="true"># 指定安装路径和pcre、zlib源代码位置,pcre和zlib的路径都是上面解压的源码路径</span>./configure --prefix<span class="token operator">=</span>/path/to/nginx --with-pcre<span class="token operator">=</span>/path/to/pcre --with-zlib<span class="token operator">=</span>/path/to/zlib --with-openssl<span class="token operator">=</span>/path/to/openssl<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx源码在<a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">https://nginx.org/en/download.html</a>,可自己选择版本。</p></li><li><p>修改环境变量</p><pre><code>export PATH=$PATH:/path/to/nginx/sbin</code></pre></li><li><p>修改端口，将由于非root，所有无法绑定1024以下的端口，在<code>ngnix.conf</code>将nginx绑定的端口改成大于1024的，比如8080。启动ngnix  <code>nohup ngnix &gt;&gt; nginx.log &amp;</code>。 这是访问<a href="http://host:8080就可以看到nginx主页了。">http://host:8080就可以看到nginx主页了。</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装升级cmake</title>
      <link href="/2019/04/16/linux/ubuntu-upgrade-cmake/"/>
      <url>/2019/04/16/linux/ubuntu-upgrade-cmake/</url>
      
        <content type="html"><![CDATA[<p>cmake 安装升级避坑指南。</p><a id="more"></a><h4 id="1-通过ppa安装"><a href="#1-通过ppa安装" class="headerlink" title="1.通过ppa安装"></a>1.通过ppa安装</h4><ul><li>apt repository 加入ppa<pre><code>sudo apt-get install software-properties-commonsudo add-apt-repository ppa:george-edison55/cmake-3.xsudo apt-get update</code></pre></li><li>如果系统默认自带了老版本的cmake，先卸载<pre><code>sudo apt-get remove cmake</code></pre></li><li>安装cmake<pre><code>sudo apt-get install cmake</code></pre></li></ul><h4 id="2-从源码编译安装（可以非root用户安装）"><a href="#2-从源码编译安装（可以非root用户安装）" class="headerlink" title="2.从源码编译安装（可以非root用户安装）"></a>2.从源码编译安装（可以非root用户安装）</h4><ul><li><p>获取源码编译</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 源码可以从[https://cmake.org/files/](https://cmake.org/files/)获得，选择你希望安装的版本，以3.7为例</span><span class="token function">wget</span> https://cmake.org/files/v3.7/cmake-3.7.0.tar.gz<span class="token function">tar</span> xf cmake-3.7.0.tar.gz<span class="token function">cd</span> cmake-3.7.0<span class="token comment" spellcheck="true"># 如果没有root权限， ./configure --prefix=/user/home/dev   --prefix 设置用户有写入权限的安装路径</span>./configure<span class="token function">make</span><span class="token comment" spellcheck="true"># 如果缺少一些编译依赖，执行</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果系统默认自带了老版本的cmake，先卸载</p><pre><code>sudo apt-get remove cmake</code></pre></li><li><p>安装</p><ul><li><code>checkinstall</code>方式安装，<code>checkinstall</code>的方式安装会生成deb包，比较便于管理，后续卸载也方便，比较推荐。<pre><code> sudo apt-get install checkinstall sudo checkinstall  # 非root不用sudo</code></pre></li><li><code>make install</code> 方式安装，如果非root，不用sudo。<pre><code>make install</code></pre></li></ul></li></ul><p><strong>备注:</strong> 如果系统自带着低版本的cmake需要升级，比较靠谱的办法还是先卸载了，再重装，<code>sudo apt-get upgrade</code>的方法不一定能成功。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu命令行查看网络流量</title>
      <link href="/2019/04/15/linux/ubuntu-net-stats-in-termial/"/>
      <url>/2019/04/15/linux/ubuntu-net-stats-in-termial/</url>
      
        <content type="html"><![CDATA[<p>命令行查看网络流量的几个小工具。</p><a id="more"></a><h4 id="1-nethogs"><a href="#1-nethogs" class="headerlink" title="1.nethogs"></a>1.nethogs</h4><p>nethogs可以查看实时进程网络占用。<br>安装： <code>sudo apt install nethogs</code><br>查看网络状态： <code>nethogs 网卡</code>，如 <code>nethogs eth0</code><br>网卡可以使用 <code>ifconfig</code> 查看</p><p><img src="http://img.kingway.fun/IMGMatrix/blog/linux/net002.png" alt=""></p><h4 id="2-bmon"><a href="#2-bmon" class="headerlink" title="2.bmon"></a>2.bmon</h4><p>安装 <code>sudo apt-get install bmon</code><br>查看所有网卡 <code>bmon</code><br>查看特定网卡 <code>bmon -p eth0</code><br>网卡可以使用 <code>ifconfig</code> 查看  </p><ul><li>使用上下按键选择要显示的网卡</li><li>输入g控制流量面板的显示和隐藏 </li><li>输入d控制详情信息的显示和隐藏 </li><li>输入q退出面板 </li></ul><p><img src="http://img.kingway.fun/IMGMatrix/blog/linux/net001.jpeg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows上使用git仓库的问题</title>
      <link href="/2019/03/17/linux/issues-using-git-in-windows/"/>
      <url>/2019/03/17/linux/issues-using-git-in-windows/</url>
      
        <content type="html"><![CDATA[<p>团队开发过程中经常会使用git工具来管理代码，团队中成员使用的终端可能是windows和类Unix系统，由于操作系统的差异可能会给大家使用git带来一些困扰。尤其是将类Unix系统中建立的仓库在windows系统打开的时候。在windows上使用<code>*nix</code>建立的仓库主要处理好三个事情，换行符、文件权限、软连接。</p><a id="more"></a><h4 id="1-处理换行符"><a href="#1-处理换行符" class="headerlink" title="1.处理换行符"></a>1.处理换行符</h4><p>&#160; &#160; &#160; &#160;换行符在各个系统中有不同的表示，一般使用两种符号，一种是<code>LF\n</code>换行,一种是<code>CR\r</code>回车。windows系统使用的是<code>\r\n</code>, unix系统使用的是<code>\r</code>,linux系统使用的是<code>\n</code>。这样就导致从不同系统checkout代码时出现文件未修改却出现modified的情况，git对此有自动转换的机制，设置<code>core.autocrlf</code>为<code>true</code>,在checkout和checkin时就会自动转换换行符。</p><pre><code>git config --global core.autocrlf true</code></pre><h4 id="2-处理权限"><a href="#2-处理权限" class="headerlink" title="2.处理权限"></a>2.处理权限</h4><p>*nix系统对拥有者、组、其他几种用户都有明确的读写执行权限，这些在windows上没有对应的机制，这个问题在使用git时表现为没有修改文件却出现很多modified的文件，<code>git status</code>显示 typechange。一般出现在增加可执行权限的文件上。git对此也有一定的策略，可以设置<code>core.filemode</code>为<code>false</code>,这样就会忽略文件权限带来的改变。</p><pre><code>git config --add core.filemode false</code></pre><p>如果clone前没有设置，导致已经进行了修改，可以用下面的命令来批量恢复这些修改。</p><pre><code>git status | grep typechange | awk &#39;{print $2}&#39; | xargs git checkout</code></pre><h4 id="3-处理软链接"><a href="#3-处理软链接" class="headerlink" title="3.处理软链接"></a>3.处理软链接</h4><p>这可能是最让人头疼的问题，在*nix系统里我们经常会使用<code>ln</code>来给文件和文件夹设置软链接，而这些软链接到windwos就失效了，不能进行导航，ide也不识别，如果有关键文件夹设置了软链接，仓库在windows上就基本不可用了。这也是笔者遇到的一大难题。  </p><p>git暂时还不能像处理换行符一样优雅的处理软链接，需要我们自己手动来处理。windows中也有自己的软链接实现方式，建立软链接使用<code>mklink</code>命令，<code>mklink</code>的使用文档是这么写的：</p><blockquote><p>MKLINK [[/D] | [/H] | [/J]] Link Target  </p></blockquote><blockquote><p>/D creates a symbolic link, or a soft link.This essentially acts like a shortcut to a folder in prior versions of Windows, except you don’t have to use an actual shortcut.  </p></blockquote><blockquote><p>/H creates a hard link, which points directly to the file.This option can’t be used for folders directly for some reason, you’ll have to use the next option.  </p></blockquote><blockquote><p>/J creates a “Directory Junction”A Directory Junction is actually just a hard link to a directory. This is a feature that existed prior to Vista as well. If you are trying to symlink to a directory using a hard link, then you should use this option.</p></blockquote><p>主要就分为三种，<code>/D</code> <code>/J</code> <code>/H</code>,<code>/D</code>和<code>/J</code>用于目录，<code>/H</code>用于文件，对链接的修改对不会影响源文件，<code>/D</code>和<code>/J</code>不会占用空间，<code>/H</code>会占用空间。具体可以参考<a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mklink" target="_blank" rel="noopener">mklink</a>. </p><p>现在我们就要将*nix中的所有软链接换成windows的link，主要三步：</p><ul><li>找到软链接文件<ul><li>使用<code>git ls-files -s</code>,git把所有的软链接设置成<code>120000</code>类型</li></ul></li><li>修改软链接<ul><li>使用<code>mklink</code>命令</li></ul></li><li>屏蔽软链接的修改<ul><li>使用<code>git update-index --assume-unchanged</code>  </li></ul></li></ul><p>上述步骤已经整理成一个python脚本，可以从我的<a href="https://gist.github.com/pkufool/b9ad6830e60058070f84eb1762ad5a14" target="_blank" rel="noopener">gist</a>获得。脚本只在<a href="https://babun.github.io/" target="_blank" rel="noopener">Babun-windows上最好用的终端</a> 测试过，其他终端可能无法使用，如有错误请自行修改。</p><p>考虑国内访问github速度，贴出脚本如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">rindex</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> lst<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true"># find symbol link files or dirs</span>fp <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"git ls-files -s | awk '/120000/{print $4}'"</span><span class="token punctuation">)</span>links <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># get symbol links' parent dir</span>link_dir <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>    index <span class="token operator">=</span> rindex<span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      link_dir<span class="token punctuation">.</span>add<span class="token punctuation">(</span>link<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      link_dir<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>work_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># make link for every symbol link</span><span class="token keyword">for</span> d <span class="token keyword">in</span> link_dir<span class="token punctuation">:</span>  os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>work_dir<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fp <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"ls -la"</span><span class="token punctuation">)</span>  items <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"->"</span> <span class="token keyword">in</span> item<span class="token punctuation">:</span>      tks <span class="token operator">=</span> item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span>      src <span class="token operator">=</span> tks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>      dst <span class="token operator">=</span> tks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>dst<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dst <span class="token operator">=</span> <span class="token string">"\\\\"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dst<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        dst <span class="token operator">=</span> dst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"link "</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> dst<span class="token punctuation">)</span>      os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"rm "</span> <span class="token operator">+</span> src<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"cmd /c mklink /H "</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> dst<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"cmd /c mklink /j "</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> dst<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># make links unchanged </span>      os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"git update-index --assume-unchanged "</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> src<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一分钟学git stash</title>
      <link href="/2019/03/10/linux/git-stash-in-one-minute/"/>
      <url>/2019/03/10/linux/git-stash-in-one-minute/</url>
      
        <content type="html"><![CDATA[<p>在使用git管理代码时会经常使用到<code>git stash</code>这个命令，一分钟复习一下。<br>一般什么情况下会用stash呢？当前修改还没完成，或者暂时不想<code>commit</code>，然而需要做<code>pull</code>，<code>merge</code>或者<code>checkout</code>到其他分支的操作，一般会用stash将修改暂时储藏。<br>接下来我们复习一些<code>stash</code>的三板斧，增、删、恢复。</p><a id="more"></a><ul><li><p>增加储藏<br>任何时候想要<code>stash</code>当前的修改，只需要用<code>git stash</code>命令，git会按栈的方式按先后顺序记录。</p><pre><code>git stash# save -a 增加助记messagegit stash save -a &quot;message&quot;</code></pre></li><li><p>查看储藏<br>查看储藏使用<code>git stash list</code>命令，所有储藏按先后顺序出现，<code>stash@{0}</code>表示最近一次储藏。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> stash liststash@<span class="token punctuation">{</span>0<span class="token punctuation">}</span>: WIP on master: 049d078 added the index <span class="token function">file</span>stash@<span class="token punctuation">{</span>1<span class="token punctuation">}</span>: WIP on master: c264051 Revert <span class="token string">"added file_size"</span>stash@<span class="token punctuation">{</span>2<span class="token punctuation">}</span>: WIP on master: 21d80a5 added number to log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>应用储藏<br>将储藏重新应用有两种方式，<code>git stash pop</code>和<code>git stash apply</code>，pop应用后会将储藏删除，而apply不会删除。另外，<strong>stash操作是不随分支的，无论在哪个分支的stash，都可以应用到任何分支</strong>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 默认apply最近的一次stash</span><span class="token function">git</span> stash apply <span class="token comment" spellcheck="true"># apply 以前的stash</span><span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span>2<span class="token punctuation">}</span>默认pop最近的一次stash<span class="token function">git</span> stash pop <span class="token comment" spellcheck="true"># pop以前的stash</span><span class="token function">git</span> stash pop stash@<span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># pop 之后会删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>撤回储藏<br>有时候应用储藏后，会有撤回的需求，比如你正在修改文件，然后apply了一个储存，之后又不想要储存里apply的修改了，可以运用撤回来清除这个储藏。</p><pre><code>git stash show -p stash@{0} | git apply -R# 如果没有指定则会撤回最近的储藏git stash show -p | git apply -R</code></pre></li><li><p>删除储藏<br>用apply应用的储藏是不会删除的，需要手工删除，可以通过drop来做，可以指定stash，也可以clear全部删除（慎用）</p><pre><code>git stash drop stash@{0}# 全部删除git stash drop clear</code></pre></li><li><p>从储藏创建分支<br>有时候一些修改希望单独出一个分支来继续改进，那么可以将这个stash直接checkout成一个单独的分支。</p><pre><code>git stash branch testchanges</code></pre><p>OK，<code>git stash</code>就这三板斧，记起来了吗？</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
